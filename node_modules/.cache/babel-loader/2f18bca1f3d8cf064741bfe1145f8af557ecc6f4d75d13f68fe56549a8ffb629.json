{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HAJAR\\\\socratic-debate-simulator\\\\src\\\\components\\\\debate\\\\DebateTimeline.js\";\n// src/components/debate/DebateTimeline.js\nimport React from 'react';\nimport '../../assets/styles/DebateTimeline.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DebateTimeline = ({\n  debate,\n  currentStage,\n  onStageSelect\n}) => {\n  if (!debate || !debate.stages || debate.stages.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debate-timeline-empty\",\n      children: \"No timeline available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Group stages by type for better visual representation\n  const stageGroups = [{\n    type: 'introduction',\n    label: 'Intro'\n  }, {\n    type: 'statement',\n    label: 'Openings'\n  }, {\n    type: 'exchange',\n    label: 'Discussion'\n  }, {\n    type: 'closing',\n    label: 'Conclusions'\n  }, {\n    type: 'summary',\n    label: 'Summary'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"debate-timeline\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeline-track\",\n      children: stageGroups.map((group, groupIndex) => {\n        const groupStages = debate.stages.filter(stage => stage.type === group.type);\n        if (groupStages.length === 0) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timeline-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-label\",\n            children: group.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-stages\",\n            children: groupStages.map((stage, stageIndex) => {\n              const stagePosition = debate.stages.findIndex(s => s.id === stage.id);\n              const isActive = stagePosition === currentStage;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `timeline-marker ${isActive ? 'active' : ''}`,\n                onClick: () => onStageSelect(stagePosition),\n                title: stage.title,\n                children: [stage.speaker && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"speaker-indicator\",\n                  style: {\n                    backgroundColor: getExpertColor(stage.speaker)\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"marker-tooltip\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-title\",\n                    children: stage.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 50,\n                    columnNumber: 25\n                  }, this), stage.speaker && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"tooltip-speaker\",\n                    children: getExpertNameById(stage.speaker, debate)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 52,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 23\n                }, this)]\n              }, stage.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this)]\n        }, group.type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeline-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-button\",\n        onClick: () => onStageSelect(Math.max(0, currentStage - 1)),\n        disabled: currentStage === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stage-indicator\",\n        children: [\"Stage \", currentStage + 1, \" of \", debate.stages.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-button\",\n        onClick: () => onStageSelect(Math.min(debate.stages.length - 1, currentStage + 1)),\n        disabled: currentStage === debate.stages.length - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get a consistent color for each expert\n_c = DebateTimeline;\nconst getExpertColor = expertId => {\n  // Simple hash function for consistent color generation\n  const hash = expertId.split('').reduce((acc, char) => {\n    return char.charCodeAt(0) + ((acc << 5) - acc);\n  }, 0);\n  const hue = hash % 360;\n  return `hsl(${hue}, 70%, 60%)`;\n};\n\n// Helper function to get an expert's name by ID\nconst getExpertNameById = (expertId, debate) => {\n  // In a real app, we would have this information directly\n  // For now, we'll extract from the stages\n  for (const stage of debate.stages) {\n    if (stage.speaker === expertId && stage.title && stage.title.includes(\"'s\")) {\n      return stage.title.split(\"'s\")[0];\n    }\n  }\n  return `Expert ${expertId}`;\n};\nexport default DebateTimeline;\nvar _c;\n$RefreshReg$(_c, \"DebateTimeline\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DebateTimeline","debate","currentStage","onStageSelect","stages","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","stageGroups","type","label","map","group","groupIndex","groupStages","filter","stage","stageIndex","stagePosition","findIndex","s","id","isActive","onClick","title","speaker","style","backgroundColor","getExpertColor","getExpertNameById","Math","max","disabled","min","_c","expertId","hash","split","reduce","acc","char","charCodeAt","hue","includes","$RefreshReg$"],"sources":["C:/Users/HAJAR/socratic-debate-simulator/src/components/debate/DebateTimeline.js"],"sourcesContent":["// src/components/debate/DebateTimeline.js\r\nimport React from 'react';\r\nimport '../../assets/styles/DebateTimeline.css';\r\n\r\nconst DebateTimeline = ({ debate, currentStage, onStageSelect }) => {\r\n  if (!debate || !debate.stages || debate.stages.length === 0) {\r\n    return <div className=\"debate-timeline-empty\">No timeline available</div>;\r\n  }\r\n  \r\n  // Group stages by type for better visual representation\r\n  const stageGroups = [\r\n    { type: 'introduction', label: 'Intro' },\r\n    { type: 'statement', label: 'Openings' }, \r\n    { type: 'exchange', label: 'Discussion' },\r\n    { type: 'closing', label: 'Conclusions' },\r\n    { type: 'summary', label: 'Summary' }\r\n  ];\r\n  \r\n  return (\r\n    <div className=\"debate-timeline\">\r\n      <div className=\"timeline-track\">\r\n        {stageGroups.map((group, groupIndex) => {\r\n          const groupStages = debate.stages.filter(stage => stage.type === group.type);\r\n          \r\n          if (groupStages.length === 0) return null;\r\n          \r\n          return (\r\n            <div key={group.type} className=\"timeline-group\">\r\n              <div className=\"group-label\">{group.label}</div>\r\n              <div className=\"group-stages\">\r\n                {groupStages.map((stage, stageIndex) => {\r\n                  const stagePosition = debate.stages.findIndex(s => s.id === stage.id);\r\n                  const isActive = stagePosition === currentStage;\r\n                  \r\n                  return (\r\n                    <div \r\n                      key={stage.id}\r\n                      className={`timeline-marker ${isActive ? 'active' : ''}`}\r\n                      onClick={() => onStageSelect(stagePosition)}\r\n                      title={stage.title}\r\n                    >\r\n                      {stage.speaker && (\r\n                        <div className=\"speaker-indicator\" \r\n                             style={{ \r\n                               backgroundColor: getExpertColor(stage.speaker)\r\n                             }}\r\n                        ></div>\r\n                      )}\r\n                      <div className=\"marker-tooltip\">\r\n                        <div className=\"tooltip-title\">{stage.title}</div>\r\n                        {stage.speaker && (\r\n                          <div className=\"tooltip-speaker\">\r\n                            {getExpertNameById(stage.speaker, debate)}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      \r\n      <div className=\"timeline-controls\">\r\n        <button \r\n          className=\"control-button\"\r\n          onClick={() => onStageSelect(Math.max(0, currentStage - 1))}\r\n          disabled={currentStage === 0}\r\n        >\r\n          Previous\r\n        </button>\r\n        \r\n        <div className=\"stage-indicator\">\r\n          Stage {currentStage + 1} of {debate.stages.length}\r\n        </div>\r\n        \r\n        <button \r\n          className=\"control-button\"\r\n          onClick={() => onStageSelect(Math.min(debate.stages.length - 1, currentStage + 1))}\r\n          disabled={currentStage === debate.stages.length - 1}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper function to get a consistent color for each expert\r\nconst getExpertColor = (expertId) => {\r\n  // Simple hash function for consistent color generation\r\n  const hash = expertId.split('').reduce((acc, char) => {\r\n    return char.charCodeAt(0) + ((acc << 5) - acc);\r\n  }, 0);\r\n  \r\n  const hue = hash % 360;\r\n  return `hsl(${hue}, 70%, 60%)`;\r\n};\r\n\r\n// Helper function to get an expert's name by ID\r\nconst getExpertNameById = (expertId, debate) => {\r\n  // In a real app, we would have this information directly\r\n  // For now, we'll extract from the stages\r\n  for (const stage of debate.stages) {\r\n    if (stage.speaker === expertId && stage.title && stage.title.includes(\"'s\")) {\r\n      return stage.title.split(\"'s\")[0];\r\n    }\r\n  }\r\n  return `Expert ${expertId}`;\r\n};\r\n\r\nexport default DebateTimeline;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}