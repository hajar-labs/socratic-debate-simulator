{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HAJAR\\\\socratic-debate-simulator\\\\src\\\\components\\\\visualization\\\\ArgumentVisualization.js\",\n  _s = $RefreshSig$();\n// src/components/visualization/ArgumentVisualization.js\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport '../../assets/styles/ArgumentVisualization.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArgumentVisualization = ({\n  debate,\n  currentStage,\n  onEvidenceClick\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    if (!debate || !debate.stages || !debate.stages[currentStage] || !svgRef.current) {\n      return;\n    }\n    const currentStageData = debate.stages[currentStage];\n    const relevantArgumentIds = currentStageData.arguments || [];\n    if (relevantArgumentIds.length === 0) {\n      return;\n    }\n\n    // Collect arguments and related arguments to display\n    const argumentsToShow = new Set();\n    const links = [];\n\n    // Add the primary arguments\n    relevantArgumentIds.forEach(argId => {\n      argumentsToShow.add(argId);\n\n      // Add connected arguments (supports and opposes)\n      const arg = debate.arguments[argId];\n      if (!arg) return;\n\n      // Add supporting arguments\n      if (arg.supports && arg.supports.length > 0) {\n        arg.supports.forEach(supportId => {\n          argumentsToShow.add(supportId);\n          links.push({\n            source: argId,\n            target: supportId,\n            type: 'supports'\n          });\n        });\n      }\n\n      // Add opposing arguments\n      if (arg.opposes && arg.opposes.length > 0) {\n        arg.opposes.forEach(opposeId => {\n          argumentsToShow.add(opposeId);\n          links.push({\n            source: argId,\n            target: opposeId,\n            type: 'opposes'\n          });\n        });\n      }\n\n      // Add evidence\n      if (arg.evidence && arg.evidence.length > 0) {\n        arg.evidence.forEach(evidenceId => {\n          argumentsToShow.add(evidenceId);\n          links.push({\n            source: argId,\n            target: evidenceId,\n            type: 'evidence'\n          });\n        });\n      }\n    });\n\n    // Convert to arrays for D3\n    const nodes = Array.from(argumentsToShow).map(id => {\n      const arg = debate.arguments[id];\n      if (!arg) return null;\n      return {\n        id,\n        label: arg.content ? arg.content.substring(0, 60) + (arg.content.length > 60 ? '...' : '') : 'Unknown',\n        type: arg.type || 'unknown',\n        strength: arg.strength || 0.5,\n        isPrimary: relevantArgumentIds.includes(id),\n        speaker: arg.speaker,\n        evidence: arg.evidence\n      };\n    }).filter(Boolean);\n\n    // Clear previous visualization\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Set up the SVG\n    const width = svgRef.current.clientWidth;\n    const height = svgRef.current.clientHeight;\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n    // Create a force simulation\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id).distance(100)).force('charge', d3.forceManyBody().strength(-200)).force('center', d3.forceCenter(width / 2, height / 2)).force('collision', d3.forceCollide().radius(50));\n\n    // Draw links\n    const link = svg.append('g').attr('class', 'links').selectAll('line').data(links).enter().append('line').attr('class', d => `link ${d.type}`).attr('stroke-width', 2).attr('stroke', d => {\n      switch (d.type) {\n        case 'supports':\n          return '#7CB342';\n        // Green for support\n        case 'opposes':\n          return '#E74C3C';\n        // Red for opposition\n        case 'evidence':\n          return '#3498DB';\n        // Blue for evidence\n        default:\n          return '#95A5A6';\n        // Grey for default\n      }\n    }).attr('stroke-dasharray', d => d.type === 'opposes' ? '5,5' : 'none');\n\n    // Create node groups\n    const node = svg.append('g').attr('class', 'nodes').selectAll('.node').data(nodes).enter().append('g').attr('class', 'node').call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended));\n\n    // Node circles\n    node.append('circle').attr('r', d => {\n      if (d.type === 'evidence') return 10;\n      return 20 + (d.strength || 0.5) * 10;\n    }).attr('fill', d => {\n      if (d.type === 'evidence') return '#3498DB';\n      if (d.type === 'claim') return '#F39C12';\n      if (d.type === 'supporting') return '#7CB342';\n      if (d.type === 'counter') return '#E74C3C';\n      if (d.type === 'response') return '#9B59B6';\n      return '#95A5A6';\n    }).attr('stroke', d => d.isPrimary ? '#1A2B47' : 'none').attr('stroke-width', d => d.isPrimary ? 3 : 0).style('cursor', 'pointer').on('click', function (event, d) {\n      if (d.evidence && d.evidence.length > 0 && onEvidenceClick) {\n        onEvidenceClick(d.evidence);\n      }\n    });\n\n    // Node labels\n    node.append('text').attr('dy', d => d.type === 'evidence' ? -15 : 30).attr('text-anchor', 'middle').attr('class', 'node-label').text(d => {\n      if (d.type === 'evidence') {\n        return 'Evidence';\n      }\n      return d.label;\n    }).attr('font-size', d => d.type === 'evidence' ? '10px' : '12px').call(wrap, 120);\n\n    // Add expert indicators for arguments\n    node.filter(d => d.speaker).append('circle').attr('class', 'expert-indicator').attr('r', 8).attr('cx', 15).attr('cy', -15).attr('fill', d => getExpertColor(d.speaker));\n\n    // Update positions on each tick\n    simulation.on('tick', () => {\n      link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      node.attr('transform', d => `translate(${d.x},${d.y})`);\n    });\n\n    // Drag functions\n    function dragstarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n\n    // Helper function to wrap text\n    function wrap(text, width) {\n      text.each(function () {\n        const text = d3.select(this);\n        const words = text.text().split(/\\s+/).reverse();\n        let word;\n        let line = [];\n        let lineNumber = 0;\n        const lineHeight = 1.1; // ems\n        const y = text.attr(\"y\");\n        const dy = parseFloat(text.attr(\"dy\")) || 0;\n        let tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n          line.push(word);\n          tspan.text(line.join(\" \"));\n          if (tspan.node().getComputedTextLength() > width) {\n            line.pop();\n            tspan.text(line.join(\" \"));\n            line = [word];\n            tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n          }\n        }\n      });\n    }\n\n    // Return cleanup function\n    return () => {\n      simulation.stop();\n    };\n  }, [debate, currentStage, onEvidenceClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"argument-visualization\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"visualization-svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get a consistent color for each expert\n_s(ArgumentVisualization, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = ArgumentVisualization;\nconst getExpertColor = expertId => {\n  // Simple hash function for consistent color generation\n  const hash = expertId.split('').reduce((acc, char) => {\n    return char.charCodeAt(0) + ((acc << 5) - acc);\n  }, 0);\n  const hue = hash % 360;\n  return `hsl(${hue}, 70%, 60%)`;\n};\nexport default ArgumentVisualization;\nvar _c;\n$RefreshReg$(_c, \"ArgumentVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","ArgumentVisualization","debate","currentStage","onEvidenceClick","_s","svgRef","stages","current","currentStageData","relevantArgumentIds","arguments","length","argumentsToShow","Set","links","forEach","argId","add","arg","supports","supportId","push","source","target","type","opposes","opposeId","evidence","evidenceId","nodes","Array","from","map","id","label","content","substring","strength","isPrimary","includes","speaker","filter","Boolean","select","selectAll","remove","width","clientWidth","height","clientHeight","svg","attr","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","forceCenter","forceCollide","radius","link","append","data","enter","node","call","drag","on","dragstarted","dragged","dragended","style","event","text","wrap","getExpertColor","x","y","active","alphaTarget","restart","fx","fy","each","words","split","reverse","word","line","lineNumber","lineHeight","dy","parseFloat","tspan","pop","join","getComputedTextLength","stop","className","children","ref","fileName","_jsxFileName","columnNumber","_c","expertId","hash","reduce","acc","char","charCodeAt","hue","$RefreshReg$"],"sources":["C:/Users/HAJAR/socratic-debate-simulator/src/components/visualization/ArgumentVisualization.js"],"sourcesContent":["// src/components/visualization/ArgumentVisualization.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport '../../assets/styles/ArgumentVisualization.css';\r\n\r\nconst ArgumentVisualization = ({ debate, currentStage, onEvidenceClick }) => {\r\n  const svgRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    if (!debate || !debate.stages || !debate.stages[currentStage] || !svgRef.current) {\r\n      return;\r\n    }\r\n    \r\n    const currentStageData = debate.stages[currentStage];\r\n    const relevantArgumentIds = currentStageData.arguments || [];\r\n    \r\n    if (relevantArgumentIds.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    // Collect arguments and related arguments to display\r\n    const argumentsToShow = new Set();\r\n    const links = [];\r\n    \r\n    // Add the primary arguments\r\n    relevantArgumentIds.forEach(argId => {\r\n      argumentsToShow.add(argId);\r\n      \r\n      // Add connected arguments (supports and opposes)\r\n      const arg = debate.arguments[argId];\r\n      if (!arg) return;\r\n      \r\n      // Add supporting arguments\r\n      if (arg.supports && arg.supports.length > 0) {\r\n        arg.supports.forEach(supportId => {\r\n          argumentsToShow.add(supportId);\r\n          links.push({ source: argId, target: supportId, type: 'supports' });\r\n        });\r\n      }\r\n      \r\n      // Add opposing arguments\r\n      if (arg.opposes && arg.opposes.length > 0) {\r\n        arg.opposes.forEach(opposeId => {\r\n          argumentsToShow.add(opposeId);\r\n          links.push({ source: argId, target: opposeId, type: 'opposes' });\r\n        });\r\n      }\r\n      \r\n      // Add evidence\r\n      if (arg.evidence && arg.evidence.length > 0) {\r\n        arg.evidence.forEach(evidenceId => {\r\n          argumentsToShow.add(evidenceId);\r\n          links.push({ source: argId, target: evidenceId, type: 'evidence' });\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Convert to arrays for D3\r\n    const nodes = Array.from(argumentsToShow)\r\n      .map(id => {\r\n        const arg = debate.arguments[id];\r\n        if (!arg) return null;\r\n        \r\n        return {\r\n          id,\r\n          label: arg.content ? arg.content.substring(0, 60) + (arg.content.length > 60 ? '...' : '') : 'Unknown',\r\n          type: arg.type || 'unknown',\r\n          strength: arg.strength || 0.5,\r\n          isPrimary: relevantArgumentIds.includes(id),\r\n          speaker: arg.speaker,\r\n          evidence: arg.evidence\r\n        };\r\n      })\r\n      .filter(Boolean);\r\n    \r\n    // Clear previous visualization\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n    \r\n    // Set up the SVG\r\n    const width = svgRef.current.clientWidth;\r\n    const height = svgRef.current.clientHeight;\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width)\r\n      .attr('height', height);\r\n    \r\n    // Create a force simulation\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(links).id(d => d.id).distance(100))\r\n      .force('charge', d3.forceManyBody().strength(-200))\r\n      .force('center', d3.forceCenter(width / 2, height / 2))\r\n      .force('collision', d3.forceCollide().radius(50));\r\n    \r\n    // Draw links\r\n    const link = svg.append('g')\r\n      .attr('class', 'links')\r\n      .selectAll('line')\r\n      .data(links)\r\n      .enter()\r\n      .append('line')\r\n      .attr('class', d => `link ${d.type}`)\r\n      .attr('stroke-width', 2)\r\n      .attr('stroke', d => {\r\n        switch(d.type) {\r\n          case 'supports': return '#7CB342'; // Green for support\r\n          case 'opposes': return '#E74C3C'; // Red for opposition\r\n          case 'evidence': return '#3498DB'; // Blue for evidence\r\n          default: return '#95A5A6'; // Grey for default\r\n        }\r\n      })\r\n      .attr('stroke-dasharray', d => d.type === 'opposes' ? '5,5' : 'none');\r\n    \r\n    // Create node groups\r\n    const node = svg.append('g')\r\n      .attr('class', 'nodes')\r\n      .selectAll('.node')\r\n      .data(nodes)\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'node')\r\n      .call(d3.drag()\r\n        .on('start', dragstarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragended));\r\n    \r\n    // Node circles\r\n    node.append('circle')\r\n      .attr('r', d => {\r\n        if (d.type === 'evidence') return 10;\r\n        return 20 + (d.strength || 0.5) * 10;\r\n      })\r\n      .attr('fill', d => {\r\n        if (d.type === 'evidence') return '#3498DB';\r\n        if (d.type === 'claim') return '#F39C12';\r\n        if (d.type === 'supporting') return '#7CB342';\r\n        if (d.type === 'counter') return '#E74C3C';\r\n        if (d.type === 'response') return '#9B59B6';\r\n        return '#95A5A6';\r\n      })\r\n      .attr('stroke', d => d.isPrimary ? '#1A2B47' : 'none')\r\n      .attr('stroke-width', d => d.isPrimary ? 3 : 0)\r\n      .style('cursor', 'pointer')\r\n      .on('click', function(event, d) {\r\n        if (d.evidence && d.evidence.length > 0 && onEvidenceClick) {\r\n          onEvidenceClick(d.evidence);\r\n        }\r\n      });\r\n    \r\n    // Node labels\r\n    node.append('text')\r\n      .attr('dy', d => d.type === 'evidence' ? -15 : 30)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('class', 'node-label')\r\n      .text(d => {\r\n        if (d.type === 'evidence') {\r\n          return 'Evidence';\r\n        }\r\n        return d.label;\r\n      })\r\n      .attr('font-size', d => d.type === 'evidence' ? '10px' : '12px')\r\n      .call(wrap, 120);\r\n    \r\n    // Add expert indicators for arguments\r\n    node.filter(d => d.speaker)\r\n      .append('circle')\r\n      .attr('class', 'expert-indicator')\r\n      .attr('r', 8)\r\n      .attr('cx', 15)\r\n      .attr('cy', -15)\r\n      .attr('fill', d => getExpertColor(d.speaker));\r\n    \r\n    // Update positions on each tick\r\n    simulation.on('tick', () => {\r\n      link\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y);\r\n      \r\n      node\r\n        .attr('transform', d => `translate(${d.x},${d.y})`);\r\n    });\r\n    \r\n    // Drag functions\r\n    function dragstarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n    \r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n    \r\n    function dragended(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n    \r\n    // Helper function to wrap text\r\n    function wrap(text, width) {\r\n      text.each(function() {\r\n        const text = d3.select(this);\r\n        const words = text.text().split(/\\s+/).reverse();\r\n        let word;\r\n        let line = [];\r\n        let lineNumber = 0;\r\n        const lineHeight = 1.1; // ems\r\n        const y = text.attr(\"y\");\r\n        const dy = parseFloat(text.attr(\"dy\")) || 0;\r\n        let tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\r\n        \r\n        while (word = words.pop()) {\r\n          line.push(word);\r\n          tspan.text(line.join(\" \"));\r\n          if (tspan.node().getComputedTextLength() > width) {\r\n            line.pop();\r\n            tspan.text(line.join(\" \"));\r\n            line = [word];\r\n            tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Return cleanup function\r\n    return () => {\r\n      simulation.stop();\r\n    };\r\n  }, [debate, currentStage, onEvidenceClick]);\r\n  \r\n  return (\r\n    <div className=\"argument-visualization\">\r\n      <svg ref={svgRef} className=\"visualization-svg\"></svg>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper function to get a consistent color for each expert\r\nconst getExpertColor = (expertId) => {\r\n  // Simple hash function for consistent color generation\r\n  const hash = expertId.split('').reduce((acc, char) => {\r\n    return char.charCodeAt(0) + ((acc << 5) - acc);\r\n  }, 0);\r\n  \r\n  const hue = hash % 360;\r\n  return `hsl(${hue}, 70%, 60%)`;\r\n};\r\n\r\nexport default ArgumentVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}