{"ast":null,"code":"/**\r\n * userPreferences.js\r\n * Service for managing user preferences for the Socratic Debate Simulator\r\n * Handles saving, loading, and updating user preferences\r\n */\n\n// Default user preferences\nconst DEFAULT_PREFERENCES = {\n  debateFormat: 'standard',\n  // standard, oxford, socratic\n  expertCount: 3,\n  technicalLevel: 'medium',\n  // beginner, medium, expert\n  focusAreas: ['ethical', 'practical'],\n  // ethical, practical, theoretical, historical\n  visualizationStyle: 'mindmap',\n  // mindmap, network, timeline\n  colorMode: 'light',\n  // light, dark, auto\n  textSize: 'medium',\n  // small, medium, large\n  animationEnabled: true,\n  recentTopics: [],\n  favoriteExperts: [],\n  accessibilitySettings: {\n    highContrast: false,\n    reducedMotion: false,\n    screenReaderOptimized: false\n  },\n  notifications: {\n    newFeatures: true,\n    expertUpdates: true,\n    savedDebateReminders: false\n  },\n  lastSeen: null\n};\n\n// Storage key for localStorage\nconst STORAGE_KEY = 'socratic_debate_user_preferences';\n\n/**\r\n * Get all user preferences\r\n * @returns {Object} User preferences object\r\n */\nexport const getUserPreferences = () => {\n  try {\n    const storedPrefs = localStorage.getItem(STORAGE_KEY);\n    if (!storedPrefs) {\n      return DEFAULT_PREFERENCES;\n    }\n    const parsedPrefs = JSON.parse(storedPrefs);\n    // Merge with defaults to ensure all fields exist (handles adding new preferences in updates)\n    return {\n      ...DEFAULT_PREFERENCES,\n      ...parsedPrefs\n    };\n  } catch (error) {\n    console.error('Error loading user preferences:', error);\n    return DEFAULT_PREFERENCES;\n  }\n};\n\n/**\r\n * Save all user preferences\r\n * @param {Object} preferences - Complete preferences object\r\n * @returns {boolean} Success status\r\n */\nexport const saveUserPreferences = preferences => {\n  try {\n    const prefsToSave = {\n      ...preferences,\n      lastSeen: new Date().toISOString()\n    };\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(prefsToSave));\n    return true;\n  } catch (error) {\n    console.error('Error saving user preferences:', error);\n    return false;\n  }\n};\n\n/**\r\n * Update specific user preference(s)\r\n * @param {Object} preferencesToUpdate - Object containing preferences to update\r\n * @returns {Object} Updated preferences object\r\n */\nexport const updateUserPreferences = preferencesToUpdate => {\n  const currentPrefs = getUserPreferences();\n  const updatedPrefs = {\n    ...currentPrefs,\n    ...preferencesToUpdate\n  };\n  saveUserPreferences(updatedPrefs);\n  return updatedPrefs;\n};\n\n/**\r\n * Reset user preferences to defaults\r\n * @returns {Object} Default preferences\r\n */\nexport const resetUserPreferences = () => {\n  saveUserPreferences(DEFAULT_PREFERENCES);\n  return DEFAULT_PREFERENCES;\n};\n\n/**\r\n * Add a topic to recent topics\r\n * @param {string} topic - Topic to add to recent list\r\n * @returns {Array} Updated recent topics array\r\n */\nexport const addRecentTopic = topic => {\n  const currentPrefs = getUserPreferences();\n  const recentTopics = [topic, ...currentPrefs.recentTopics.filter(t => t !== topic)].slice(0, 10);\n  updateUserPreferences({\n    recentTopics\n  });\n  return recentTopics;\n};\n\n/**\r\n * Add or remove an expert from favorites\r\n * @param {string} expertId - Expert ID to toggle in favorites\r\n * @returns {Array} Updated favorite experts array\r\n */\nexport const toggleFavoriteExpert = expertId => {\n  const currentPrefs = getUserPreferences();\n  let favoriteExperts;\n  if (currentPrefs.favoriteExperts.includes(expertId)) {\n    favoriteExperts = currentPrefs.favoriteExperts.filter(id => id !== expertId);\n  } else {\n    favoriteExperts = [...currentPrefs.favoriteExperts, expertId].slice(0, 20);\n  }\n  updateUserPreferences({\n    favoriteExperts\n  });\n  return favoriteExperts;\n};\n\n/**\r\n * Update visualization preferences\r\n * @param {Object} visualizationPrefs - Object with visualization preferences\r\n * @returns {Object} Updated preferences object\r\n */\nexport const updateVisualizationPreferences = visualizationPrefs => {\n  const currentPrefs = getUserPreferences();\n  const updatedPrefs = {\n    ...currentPrefs,\n    visualizationStyle: visualizationPrefs.style || currentPrefs.visualizationStyle,\n    animationEnabled: visualizationPrefs.animationEnabled !== undefined ? visualizationPrefs.animationEnabled : currentPrefs.animationEnabled\n  };\n  saveUserPreferences(updatedPrefs);\n  return updatedPrefs;\n};\n\n/**\r\n * Update accessibility settings\r\n * @param {Object} accessibilitySettings - Object with accessibility settings\r\n * @returns {Object} Updated accessibility settings\r\n */\nexport const updateAccessibilitySettings = accessibilitySettings => {\n  const currentPrefs = getUserPreferences();\n  const updatedSettings = {\n    ...currentPrefs.accessibilitySettings,\n    ...accessibilitySettings\n  };\n  updateUserPreferences({\n    accessibilitySettings: updatedSettings\n  });\n  return updatedSettings;\n};\n\n/**\r\n * Check if this is the user's first visit\r\n * @returns {boolean} True if first visit\r\n */\nexport const isFirstVisit = () => {\n  const prefs = getUserPreferences();\n  return prefs.lastSeen === null;\n};\n\n/**\r\n * Export user preferences to a file\r\n * @returns {Blob} Preferences as a JSON file blob\r\n */\nexport const exportUserPreferences = () => {\n  const prefs = getUserPreferences();\n  const prefsJson = JSON.stringify(prefs, null, 2);\n  return new Blob([prefsJson], {\n    type: 'application/json'\n  });\n};\n\n/**\r\n * Import user preferences from a JSON object\r\n * @param {Object} importedPrefs - Preferences object to import\r\n * @returns {Object} Imported and normalized preferences\r\n */\nexport const importUserPreferences = importedPrefs => {\n  // Validate and normalize imported preferences\n  const normalizedPrefs = {\n    ...DEFAULT_PREFERENCES,\n    ...importedPrefs\n  };\n  saveUserPreferences(normalizedPrefs);\n  return normalizedPrefs;\n};\nexport default {\n  getUserPreferences,\n  saveUserPreferences,\n  updateUserPreferences,\n  resetUserPreferences,\n  addRecentTopic,\n  toggleFavoriteExpert,\n  updateVisualizationPreferences,\n  updateAccessibilitySettings,\n  isFirstVisit,\n  exportUserPreferences,\n  importUserPreferences\n};","map":{"version":3,"names":["DEFAULT_PREFERENCES","debateFormat","expertCount","technicalLevel","focusAreas","visualizationStyle","colorMode","textSize","animationEnabled","recentTopics","favoriteExperts","accessibilitySettings","highContrast","reducedMotion","screenReaderOptimized","notifications","newFeatures","expertUpdates","savedDebateReminders","lastSeen","STORAGE_KEY","getUserPreferences","storedPrefs","localStorage","getItem","parsedPrefs","JSON","parse","error","console","saveUserPreferences","preferences","prefsToSave","Date","toISOString","setItem","stringify","updateUserPreferences","preferencesToUpdate","currentPrefs","updatedPrefs","resetUserPreferences","addRecentTopic","topic","filter","t","slice","toggleFavoriteExpert","expertId","includes","id","updateVisualizationPreferences","visualizationPrefs","style","undefined","updateAccessibilitySettings","updatedSettings","isFirstVisit","prefs","exportUserPreferences","prefsJson","Blob","type","importUserPreferences","importedPrefs","normalizedPrefs"],"sources":["C:/Users/HAJAR/socratic-debate-simulator/src/services/userPreferences.js"],"sourcesContent":["/**\r\n * userPreferences.js\r\n * Service for managing user preferences for the Socratic Debate Simulator\r\n * Handles saving, loading, and updating user preferences\r\n */\r\n\r\n// Default user preferences\r\nconst DEFAULT_PREFERENCES = {\r\n  debateFormat: 'standard', // standard, oxford, socratic\r\n  expertCount: 3,\r\n  technicalLevel: 'medium', // beginner, medium, expert\r\n  focusAreas: ['ethical', 'practical'], // ethical, practical, theoretical, historical\r\n  visualizationStyle: 'mindmap', // mindmap, network, timeline\r\n  colorMode: 'light', // light, dark, auto\r\n  textSize: 'medium', // small, medium, large\r\n  animationEnabled: true,\r\n  recentTopics: [],\r\n  favoriteExperts: [],\r\n  accessibilitySettings: {\r\n    highContrast: false,\r\n    reducedMotion: false,\r\n    screenReaderOptimized: false\r\n  },\r\n  notifications: {\r\n    newFeatures: true,\r\n    expertUpdates: true,\r\n    savedDebateReminders: false\r\n  },\r\n  lastSeen: null\r\n};\r\n\r\n// Storage key for localStorage\r\nconst STORAGE_KEY = 'socratic_debate_user_preferences';\r\n\r\n/**\r\n * Get all user preferences\r\n * @returns {Object} User preferences object\r\n */\r\nexport const getUserPreferences = () => {\r\n  try {\r\n    const storedPrefs = localStorage.getItem(STORAGE_KEY);\r\n    if (!storedPrefs) {\r\n      return DEFAULT_PREFERENCES;\r\n    }\r\n    \r\n    const parsedPrefs = JSON.parse(storedPrefs);\r\n    // Merge with defaults to ensure all fields exist (handles adding new preferences in updates)\r\n    return { ...DEFAULT_PREFERENCES, ...parsedPrefs };\r\n  } catch (error) {\r\n    console.error('Error loading user preferences:', error);\r\n    return DEFAULT_PREFERENCES;\r\n  }\r\n};\r\n\r\n/**\r\n * Save all user preferences\r\n * @param {Object} preferences - Complete preferences object\r\n * @returns {boolean} Success status\r\n */\r\nexport const saveUserPreferences = (preferences) => {\r\n  try {\r\n    const prefsToSave = { ...preferences, lastSeen: new Date().toISOString() };\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(prefsToSave));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving user preferences:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Update specific user preference(s)\r\n * @param {Object} preferencesToUpdate - Object containing preferences to update\r\n * @returns {Object} Updated preferences object\r\n */\r\nexport const updateUserPreferences = (preferencesToUpdate) => {\r\n  const currentPrefs = getUserPreferences();\r\n  const updatedPrefs = { ...currentPrefs, ...preferencesToUpdate };\r\n  saveUserPreferences(updatedPrefs);\r\n  return updatedPrefs;\r\n};\r\n\r\n/**\r\n * Reset user preferences to defaults\r\n * @returns {Object} Default preferences\r\n */\r\nexport const resetUserPreferences = () => {\r\n  saveUserPreferences(DEFAULT_PREFERENCES);\r\n  return DEFAULT_PREFERENCES;\r\n};\r\n\r\n/**\r\n * Add a topic to recent topics\r\n * @param {string} topic - Topic to add to recent list\r\n * @returns {Array} Updated recent topics array\r\n */\r\nexport const addRecentTopic = (topic) => {\r\n  const currentPrefs = getUserPreferences();\r\n  const recentTopics = [topic, ...currentPrefs.recentTopics.filter(t => t !== topic)].slice(0, 10);\r\n  updateUserPreferences({ recentTopics });\r\n  return recentTopics;\r\n};\r\n\r\n/**\r\n * Add or remove an expert from favorites\r\n * @param {string} expertId - Expert ID to toggle in favorites\r\n * @returns {Array} Updated favorite experts array\r\n */\r\nexport const toggleFavoriteExpert = (expertId) => {\r\n  const currentPrefs = getUserPreferences();\r\n  let favoriteExperts;\r\n  \r\n  if (currentPrefs.favoriteExperts.includes(expertId)) {\r\n    favoriteExperts = currentPrefs.favoriteExperts.filter(id => id !== expertId);\r\n  } else {\r\n    favoriteExperts = [...currentPrefs.favoriteExperts, expertId].slice(0, 20);\r\n  }\r\n  \r\n  updateUserPreferences({ favoriteExperts });\r\n  return favoriteExperts;\r\n};\r\n\r\n/**\r\n * Update visualization preferences\r\n * @param {Object} visualizationPrefs - Object with visualization preferences\r\n * @returns {Object} Updated preferences object\r\n */\r\nexport const updateVisualizationPreferences = (visualizationPrefs) => {\r\n  const currentPrefs = getUserPreferences();\r\n  const updatedPrefs = { \r\n    ...currentPrefs,\r\n    visualizationStyle: visualizationPrefs.style || currentPrefs.visualizationStyle,\r\n    animationEnabled: \r\n      visualizationPrefs.animationEnabled !== undefined \r\n        ? visualizationPrefs.animationEnabled \r\n        : currentPrefs.animationEnabled\r\n  };\r\n  \r\n  saveUserPreferences(updatedPrefs);\r\n  return updatedPrefs;\r\n};\r\n\r\n/**\r\n * Update accessibility settings\r\n * @param {Object} accessibilitySettings - Object with accessibility settings\r\n * @returns {Object} Updated accessibility settings\r\n */\r\nexport const updateAccessibilitySettings = (accessibilitySettings) => {\r\n  const currentPrefs = getUserPreferences();\r\n  const updatedSettings = {\r\n    ...currentPrefs.accessibilitySettings,\r\n    ...accessibilitySettings\r\n  };\r\n  \r\n  updateUserPreferences({ accessibilitySettings: updatedSettings });\r\n  return updatedSettings;\r\n};\r\n\r\n/**\r\n * Check if this is the user's first visit\r\n * @returns {boolean} True if first visit\r\n */\r\nexport const isFirstVisit = () => {\r\n  const prefs = getUserPreferences();\r\n  return prefs.lastSeen === null;\r\n};\r\n\r\n/**\r\n * Export user preferences to a file\r\n * @returns {Blob} Preferences as a JSON file blob\r\n */\r\nexport const exportUserPreferences = () => {\r\n  const prefs = getUserPreferences();\r\n  const prefsJson = JSON.stringify(prefs, null, 2);\r\n  return new Blob([prefsJson], { type: 'application/json' });\r\n};\r\n\r\n/**\r\n * Import user preferences from a JSON object\r\n * @param {Object} importedPrefs - Preferences object to import\r\n * @returns {Object} Imported and normalized preferences\r\n */\r\nexport const importUserPreferences = (importedPrefs) => {\r\n  // Validate and normalize imported preferences\r\n  const normalizedPrefs = { ...DEFAULT_PREFERENCES, ...importedPrefs };\r\n  saveUserPreferences(normalizedPrefs);\r\n  return normalizedPrefs;\r\n};\r\n\r\nexport default {\r\n  getUserPreferences,\r\n  saveUserPreferences,\r\n  updateUserPreferences,\r\n  resetUserPreferences,\r\n  addRecentTopic,\r\n  toggleFavoriteExpert,\r\n  updateVisualizationPreferences,\r\n  updateAccessibilitySettings,\r\n  isFirstVisit,\r\n  exportUserPreferences,\r\n  importUserPreferences\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}