{"ast":null,"code":"/**\r\n * analyticsService.js\r\n * Service for tracking user engagement metrics in the Socratic Debate Simulator\r\n * Handles anonymous data collection for improving the application\r\n */\n\nimport { getUserPreferences } from './userPreferences';\n\n// Analytics events\nexport const ANALYTICS_EVENTS = {\n  // Application events\n  APP_LOADED: 'app_loaded',\n  ERROR_OCCURRED: 'error_occurred',\n  // Topic events\n  TOPIC_SEARCHED: 'topic_searched',\n  TOPIC_SELECTED: 'topic_selected',\n  // Expert events\n  EXPERT_VIEWED: 'expert_viewed',\n  EXPERT_SELECTED: 'expert_selected',\n  EXPERT_FAVORITED: 'expert_favorited',\n  // Debate events\n  DEBATE_STARTED: 'debate_started',\n  DEBATE_COMPLETED: 'debate_completed',\n  DEBATE_SHARED: 'debate_shared',\n  DEBATE_SAVED: 'debate_saved',\n  // Interaction events\n  QUESTION_ASKED: 'question_asked',\n  EVIDENCE_VIEWED: 'evidence_viewed',\n  CHALLENGE_MADE: 'challenge_made',\n  CLAIM_EXPLORED: 'claim_explored',\n  // UI events\n  VISUALIZATION_CHANGED: 'visualization_changed',\n  SETTINGS_CHANGED: 'settings_changed',\n  NAVIGATION_CHANGED: 'navigation_changed',\n  // Learning events\n  TAKEAWAY_GENERATED: 'takeaway_generated',\n  RESOURCE_CLICKED: 'resource_clicked'\n};\n\n// Initialize analytics with an optional API key\nlet analyticsApiKey = null;\nlet isEnabled = true;\nlet sessionId = null;\nlet eventQueue = [];\nlet isInitialized = false;\n\n/**\r\n * Initialize the analytics service\r\n * @param {Object} config - Configuration options\r\n * @param {string} config.apiKey - API key for analytics service\r\n * @param {boolean} config.enabled - Whether analytics is enabled\r\n * @returns {boolean} Initialization success\r\n */\nexport const initAnalytics = (config = {}) => {\n  try {\n    var _userPrefs$privacy;\n    // Check user preferences for analytics opt-out\n    const userPrefs = getUserPreferences();\n    const analyticsOptedOut = (userPrefs === null || userPrefs === void 0 ? void 0 : (_userPrefs$privacy = userPrefs.privacy) === null || _userPrefs$privacy === void 0 ? void 0 : _userPrefs$privacy.disableAnalytics) || false;\n    analyticsApiKey = config.apiKey || process.env.REACT_APP_ANALYTICS_API_KEY;\n    isEnabled = config.enabled !== undefined ? config.enabled : true;\n\n    // Respect user opt-out\n    if (analyticsOptedOut) {\n      isEnabled = false;\n    }\n\n    // Generate a unique session ID\n    sessionId = generateSessionId();\n\n    // Process any queued events\n    if (eventQueue.length > 0 && isEnabled) {\n      processEventQueue();\n    }\n    isInitialized = true;\n\n    // Send initialization event\n    if (isEnabled) {\n      trackEvent(ANALYTICS_EVENTS.APP_LOADED, {\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent,\n        viewportWidth: window.innerWidth,\n        viewportHeight: window.innerHeight,\n        language: navigator.language\n      });\n    }\n    return true;\n  } catch (error) {\n    console.error('Failed to initialize analytics:', error);\n    return false;\n  }\n};\n\n/**\r\n * Track an analytics event\r\n * @param {string} eventName - Name of the event from ANALYTICS_EVENTS\r\n * @param {Object} eventData - Additional data for the event\r\n * @returns {boolean} Success status\r\n */\nexport const trackEvent = (eventName, eventData = {}) => {\n  if (!isInitialized) {\n    // Queue events until initialization\n    eventQueue.push({\n      eventName,\n      eventData,\n      timestamp: new Date().toISOString()\n    });\n    return false;\n  }\n  if (!isEnabled) {\n    return false;\n  }\n  try {\n    const event = {\n      eventName,\n      sessionId,\n      timestamp: new Date().toISOString(),\n      data: eventData\n    };\n\n    // In a real implementation, this would send to an analytics service\n    // For now, we'll log to console in development and send to a hypothetical endpoint in production\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[Analytics]', event);\n    } else {\n      sendEventToAnalyticsService(event);\n    }\n    return true;\n  } catch (error) {\n    console.error('Error tracking event:', error);\n    return false;\n  }\n};\n\n/**\r\n * Track a debate-related event with debate details\r\n * @param {string} eventName - Name of the event\r\n * @param {string} debateId - ID of the debate\r\n * @param {Object} debateData - Additional debate data\r\n * @returns {boolean} Success status\r\n */\nexport const trackDebateEvent = (eventName, debateId, debateData = {}) => {\n  var _debateData$experts;\n  return trackEvent(eventName, {\n    debateId,\n    topic: debateData.topic || '',\n    expertCount: ((_debateData$experts = debateData.experts) === null || _debateData$experts === void 0 ? void 0 : _debateData$experts.length) || 0,\n    format: debateData.format || 'standard',\n    duration: debateData.duration || 0,\n    ...debateData\n  });\n};\n\n/**\r\n * Track user interaction with experts\r\n * @param {string} eventName - Name of the event\r\n * @param {string} expertId - ID of the expert\r\n * @param {Object} interactionData - Additional interaction data\r\n * @returns {boolean} Success status\r\n */\nexport const trackExpertInteraction = (eventName, expertId, interactionData = {}) => {\n  return trackEvent(eventName, {\n    expertId,\n    expertArea: interactionData.area || '',\n    interactionType: interactionData.type || 'view',\n    ...interactionData\n  });\n};\n\n/**\r\n * Track user engagement with debate content\r\n * @param {string} contentType - Type of content (argument, evidence, etc.)\r\n * @param {string} contentId - ID of the content\r\n * @param {Object} engagementData - Additional engagement data\r\n * @returns {boolean} Success status\r\n */\nexport const trackContentEngagement = (contentType, contentId, engagementData = {}) => {\n  return trackEvent(`${contentType}_engaged`, {\n    contentId,\n    contentType,\n    engagementType: engagementData.type || 'view',\n    engagementDuration: engagementData.duration || 0,\n    ...engagementData\n  });\n};\n\n/**\r\n * Track errors that occur in the application\r\n * @param {Error} error - Error object\r\n * @param {string} context - Where the error occurred\r\n * @returns {boolean} Success status\r\n */\nexport const trackError = (error, context = '') => {\n  return trackEvent(ANALYTICS_EVENTS.ERROR_OCCURRED, {\n    errorMessage: error.message,\n    errorStack: error.stack,\n    errorName: error.name,\n    context\n  });\n};\n\n/**\r\n * Generate performance metrics for the current session\r\n * @returns {Object} Performance metrics\r\n */\nexport const getPerformanceMetrics = () => {\n  var _paint$find, _paint$find2;\n  if (!window.performance) {\n    return {};\n  }\n  const navigation = window.performance.getEntriesByType('navigation')[0];\n  const paint = window.performance.getEntriesByType('paint');\n  return {\n    pageLoadTime: navigation ? navigation.loadEventEnd - navigation.startTime : null,\n    domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.startTime : null,\n    firstPaint: ((_paint$find = paint.find(p => p.name === 'first-paint')) === null || _paint$find === void 0 ? void 0 : _paint$find.startTime) || null,\n    firstContentfulPaint: ((_paint$find2 = paint.find(p => p.name === 'first-contentful-paint')) === null || _paint$find2 === void 0 ? void 0 : _paint$find2.startTime) || null\n  };\n};\n\n/**\r\n * Disable analytics collection\r\n */\nexport const disableAnalytics = () => {\n  isEnabled = false;\n\n  // Update user preferences\n  try {\n    const userPrefs = getUserPreferences();\n    if (userPrefs && userPrefs.privacy) {\n      userPrefs.privacy.disableAnalytics = true;\n      saveUserPreferences(userPrefs);\n    }\n  } catch (error) {\n    console.error('Error updating analytics preferences:', error);\n  }\n};\n\n/**\r\n * Enable analytics collection\r\n */\nexport const enableAnalytics = () => {\n  isEnabled = true;\n\n  // Update user preferences\n  try {\n    const userPrefs = getUserPreferences();\n    if (userPrefs && userPrefs.privacy) {\n      userPrefs.privacy.disableAnalytics = false;\n      saveUserPreferences(userPrefs);\n    }\n  } catch (error) {\n    console.error('Error updating analytics preferences:', error);\n  }\n\n  // Process any queued events\n  if (eventQueue.length > 0) {\n    processEventQueue();\n  }\n};\n\n// ----- Private Helper Functions -----\n\n/**\r\n * Generate a unique session ID\r\n * @returns {string} Session ID\r\n */\nconst generateSessionId = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\n\n/**\r\n * Process the event queue\r\n */\nconst processEventQueue = () => {\n  while (eventQueue.length > 0) {\n    const event = eventQueue.shift();\n    trackEvent(event.eventName, event.eventData);\n  }\n};\n\n/**\r\n * Send event to analytics service (mock implementation)\r\n * @param {Object} event - Event to send\r\n */\nconst sendEventToAnalyticsService = event => {\n  // In a real implementation, this would send to an actual analytics service\n  // Using fetch, SDK, or other method\n\n  if (!analyticsApiKey) {\n    return;\n  }\n  try {\n    // Mock implementation - replace with actual API call\n    const analyticsEndpoint = 'https://api.example.com/analytics';\n    fetch(analyticsEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${analyticsApiKey}`\n      },\n      body: JSON.stringify(event)\n    }).catch(error => {\n      console.error('Failed to send analytics event:', error);\n    });\n  } catch (error) {\n    console.error('Error sending analytics event:', error);\n  }\n};\nexport default {\n  initAnalytics,\n  trackEvent,\n  trackDebateEvent,\n  trackExpertInteraction,\n  trackContentEngagement,\n  trackError,\n  getPerformanceMetrics,\n  disableAnalytics,\n  enableAnalytics,\n  ANALYTICS_EVENTS\n};","map":{"version":3,"names":["getUserPreferences","ANALYTICS_EVENTS","APP_LOADED","ERROR_OCCURRED","TOPIC_SEARCHED","TOPIC_SELECTED","EXPERT_VIEWED","EXPERT_SELECTED","EXPERT_FAVORITED","DEBATE_STARTED","DEBATE_COMPLETED","DEBATE_SHARED","DEBATE_SAVED","QUESTION_ASKED","EVIDENCE_VIEWED","CHALLENGE_MADE","CLAIM_EXPLORED","VISUALIZATION_CHANGED","SETTINGS_CHANGED","NAVIGATION_CHANGED","TAKEAWAY_GENERATED","RESOURCE_CLICKED","analyticsApiKey","isEnabled","sessionId","eventQueue","isInitialized","initAnalytics","config","_userPrefs$privacy","userPrefs","analyticsOptedOut","privacy","disableAnalytics","apiKey","process","env","REACT_APP_ANALYTICS_API_KEY","enabled","undefined","generateSessionId","length","processEventQueue","trackEvent","timestamp","Date","toISOString","userAgent","navigator","viewportWidth","window","innerWidth","viewportHeight","innerHeight","language","error","console","eventName","eventData","push","event","data","NODE_ENV","log","sendEventToAnalyticsService","trackDebateEvent","debateId","debateData","_debateData$experts","topic","expertCount","experts","format","duration","trackExpertInteraction","expertId","interactionData","expertArea","area","interactionType","type","trackContentEngagement","contentType","contentId","engagementData","engagementType","engagementDuration","trackError","context","errorMessage","message","errorStack","stack","errorName","name","getPerformanceMetrics","_paint$find","_paint$find2","performance","navigation","getEntriesByType","paint","pageLoadTime","loadEventEnd","startTime","domContentLoaded","domContentLoadedEventEnd","firstPaint","find","p","firstContentfulPaint","saveUserPreferences","enableAnalytics","replace","c","r","Math","random","v","toString","shift","analyticsEndpoint","fetch","method","headers","body","JSON","stringify","catch"],"sources":["C:/Users/HAJAR/socratic-debate-simulator/src/services/analyticsService.js"],"sourcesContent":["/**\r\n * analyticsService.js\r\n * Service for tracking user engagement metrics in the Socratic Debate Simulator\r\n * Handles anonymous data collection for improving the application\r\n */\r\n\r\nimport { getUserPreferences } from './userPreferences';\r\n\r\n// Analytics events\r\nexport const ANALYTICS_EVENTS = {\r\n  // Application events\r\n  APP_LOADED: 'app_loaded',\r\n  ERROR_OCCURRED: 'error_occurred',\r\n  \r\n  // Topic events\r\n  TOPIC_SEARCHED: 'topic_searched',\r\n  TOPIC_SELECTED: 'topic_selected',\r\n  \r\n  // Expert events\r\n  EXPERT_VIEWED: 'expert_viewed',\r\n  EXPERT_SELECTED: 'expert_selected',\r\n  EXPERT_FAVORITED: 'expert_favorited',\r\n  \r\n  // Debate events\r\n  DEBATE_STARTED: 'debate_started',\r\n  DEBATE_COMPLETED: 'debate_completed',\r\n  DEBATE_SHARED: 'debate_shared',\r\n  DEBATE_SAVED: 'debate_saved',\r\n  \r\n  // Interaction events\r\n  QUESTION_ASKED: 'question_asked',\r\n  EVIDENCE_VIEWED: 'evidence_viewed', \r\n  CHALLENGE_MADE: 'challenge_made',\r\n  CLAIM_EXPLORED: 'claim_explored',\r\n  \r\n  // UI events\r\n  VISUALIZATION_CHANGED: 'visualization_changed',\r\n  SETTINGS_CHANGED: 'settings_changed',\r\n  NAVIGATION_CHANGED: 'navigation_changed',\r\n  \r\n  // Learning events\r\n  TAKEAWAY_GENERATED: 'takeaway_generated',\r\n  RESOURCE_CLICKED: 'resource_clicked'\r\n};\r\n\r\n// Initialize analytics with an optional API key\r\nlet analyticsApiKey = null;\r\nlet isEnabled = true;\r\nlet sessionId = null;\r\nlet eventQueue = [];\r\nlet isInitialized = false;\r\n\r\n/**\r\n * Initialize the analytics service\r\n * @param {Object} config - Configuration options\r\n * @param {string} config.apiKey - API key for analytics service\r\n * @param {boolean} config.enabled - Whether analytics is enabled\r\n * @returns {boolean} Initialization success\r\n */\r\nexport const initAnalytics = (config = {}) => {\r\n  try {\r\n    // Check user preferences for analytics opt-out\r\n    const userPrefs = getUserPreferences();\r\n    const analyticsOptedOut = userPrefs?.privacy?.disableAnalytics || false;\r\n    \r\n    analyticsApiKey = config.apiKey || process.env.REACT_APP_ANALYTICS_API_KEY;\r\n    isEnabled = (config.enabled !== undefined) ? config.enabled : true;\r\n    \r\n    // Respect user opt-out\r\n    if (analyticsOptedOut) {\r\n      isEnabled = false;\r\n    }\r\n    \r\n    // Generate a unique session ID\r\n    sessionId = generateSessionId();\r\n    \r\n    // Process any queued events\r\n    if (eventQueue.length > 0 && isEnabled) {\r\n      processEventQueue();\r\n    }\r\n    \r\n    isInitialized = true;\r\n    \r\n    // Send initialization event\r\n    if (isEnabled) {\r\n      trackEvent(ANALYTICS_EVENTS.APP_LOADED, {\r\n        timestamp: new Date().toISOString(),\r\n        userAgent: navigator.userAgent,\r\n        viewportWidth: window.innerWidth,\r\n        viewportHeight: window.innerHeight,\r\n        language: navigator.language\r\n      });\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Failed to initialize analytics:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Track an analytics event\r\n * @param {string} eventName - Name of the event from ANALYTICS_EVENTS\r\n * @param {Object} eventData - Additional data for the event\r\n * @returns {boolean} Success status\r\n */\r\nexport const trackEvent = (eventName, eventData = {}) => {\r\n  if (!isInitialized) {\r\n    // Queue events until initialization\r\n    eventQueue.push({ eventName, eventData, timestamp: new Date().toISOString() });\r\n    return false;\r\n  }\r\n  \r\n  if (!isEnabled) {\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    const event = {\r\n      eventName,\r\n      sessionId,\r\n      timestamp: new Date().toISOString(),\r\n      data: eventData\r\n    };\r\n    \r\n    // In a real implementation, this would send to an analytics service\r\n    // For now, we'll log to console in development and send to a hypothetical endpoint in production\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('[Analytics]', event);\r\n    } else {\r\n      sendEventToAnalyticsService(event);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error tracking event:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Track a debate-related event with debate details\r\n * @param {string} eventName - Name of the event\r\n * @param {string} debateId - ID of the debate\r\n * @param {Object} debateData - Additional debate data\r\n * @returns {boolean} Success status\r\n */\r\nexport const trackDebateEvent = (eventName, debateId, debateData = {}) => {\r\n  return trackEvent(eventName, {\r\n    debateId,\r\n    topic: debateData.topic || '',\r\n    expertCount: debateData.experts?.length || 0,\r\n    format: debateData.format || 'standard',\r\n    duration: debateData.duration || 0,\r\n    ...debateData\r\n  });\r\n};\r\n\r\n/**\r\n * Track user interaction with experts\r\n * @param {string} eventName - Name of the event\r\n * @param {string} expertId - ID of the expert\r\n * @param {Object} interactionData - Additional interaction data\r\n * @returns {boolean} Success status\r\n */\r\nexport const trackExpertInteraction = (eventName, expertId, interactionData = {}) => {\r\n  return trackEvent(eventName, {\r\n    expertId,\r\n    expertArea: interactionData.area || '',\r\n    interactionType: interactionData.type || 'view',\r\n    ...interactionData\r\n  });\r\n};\r\n\r\n/**\r\n * Track user engagement with debate content\r\n * @param {string} contentType - Type of content (argument, evidence, etc.)\r\n * @param {string} contentId - ID of the content\r\n * @param {Object} engagementData - Additional engagement data\r\n * @returns {boolean} Success status\r\n */\r\nexport const trackContentEngagement = (contentType, contentId, engagementData = {}) => {\r\n  return trackEvent(`${contentType}_engaged`, {\r\n    contentId,\r\n    contentType,\r\n    engagementType: engagementData.type || 'view',\r\n    engagementDuration: engagementData.duration || 0,\r\n    ...engagementData\r\n  });\r\n};\r\n\r\n/**\r\n * Track errors that occur in the application\r\n * @param {Error} error - Error object\r\n * @param {string} context - Where the error occurred\r\n * @returns {boolean} Success status\r\n */\r\nexport const trackError = (error, context = '') => {\r\n  return trackEvent(ANALYTICS_EVENTS.ERROR_OCCURRED, {\r\n    errorMessage: error.message,\r\n    errorStack: error.stack,\r\n    errorName: error.name,\r\n    context\r\n  });\r\n};\r\n\r\n/**\r\n * Generate performance metrics for the current session\r\n * @returns {Object} Performance metrics\r\n */\r\nexport const getPerformanceMetrics = () => {\r\n  if (!window.performance) {\r\n    return {};\r\n  }\r\n  \r\n  const navigation = window.performance.getEntriesByType('navigation')[0];\r\n  const paint = window.performance.getEntriesByType('paint');\r\n  \r\n  return {\r\n    pageLoadTime: navigation ? navigation.loadEventEnd - navigation.startTime : null,\r\n    domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.startTime : null,\r\n    firstPaint: paint.find(p => p.name === 'first-paint')?.startTime || null,\r\n    firstContentfulPaint: paint.find(p => p.name === 'first-contentful-paint')?.startTime || null\r\n  };\r\n};\r\n\r\n/**\r\n * Disable analytics collection\r\n */\r\nexport const disableAnalytics = () => {\r\n  isEnabled = false;\r\n  \r\n  // Update user preferences\r\n  try {\r\n    const userPrefs = getUserPreferences();\r\n    if (userPrefs && userPrefs.privacy) {\r\n      userPrefs.privacy.disableAnalytics = true;\r\n      saveUserPreferences(userPrefs);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating analytics preferences:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * Enable analytics collection\r\n */\r\nexport const enableAnalytics = () => {\r\n  isEnabled = true;\r\n  \r\n  // Update user preferences\r\n  try {\r\n    const userPrefs = getUserPreferences();\r\n    if (userPrefs && userPrefs.privacy) {\r\n      userPrefs.privacy.disableAnalytics = false;\r\n      saveUserPreferences(userPrefs);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating analytics preferences:', error);\r\n  }\r\n  \r\n  // Process any queued events\r\n  if (eventQueue.length > 0) {\r\n    processEventQueue();\r\n  }\r\n};\r\n\r\n// ----- Private Helper Functions -----\r\n\r\n/**\r\n * Generate a unique session ID\r\n * @returns {string} Session ID\r\n */\r\nconst generateSessionId = () => {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    const r = Math.random() * 16 | 0;\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n};\r\n\r\n/**\r\n * Process the event queue\r\n */\r\nconst processEventQueue = () => {\r\n  while (eventQueue.length > 0) {\r\n    const event = eventQueue.shift();\r\n    trackEvent(event.eventName, event.eventData);\r\n  }\r\n};\r\n\r\n/**\r\n * Send event to analytics service (mock implementation)\r\n * @param {Object} event - Event to send\r\n */\r\nconst sendEventToAnalyticsService = (event) => {\r\n  // In a real implementation, this would send to an actual analytics service\r\n  // Using fetch, SDK, or other method\r\n  \r\n  if (!analyticsApiKey) {\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // Mock implementation - replace with actual API call\r\n    const analyticsEndpoint = 'https://api.example.com/analytics';\r\n    \r\n    fetch(analyticsEndpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${analyticsApiKey}`\r\n      },\r\n      body: JSON.stringify(event)\r\n    }).catch(error => {\r\n      console.error('Failed to send analytics event:', error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending analytics event:', error);\r\n  }\r\n};\r\n\r\nexport default {\r\n  initAnalytics,\r\n  trackEvent,\r\n  trackDebateEvent,\r\n  trackExpertInteraction,\r\n  trackContentEngagement,\r\n  trackError,\r\n  getPerformanceMetrics,\r\n  disableAnalytics,\r\n  enableAnalytics,\r\n  ANALYTICS_EVENTS\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}