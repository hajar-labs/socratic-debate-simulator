{"ast":null,"code":"// src/services/debateService.js\nimport { v4 as uuidv4 } from 'uuid';\n\n// This service would normally make API calls to an LLM backend\n// For now, we'll simulate the debate generation\n\nexport const generateDebate = (topic, experts, format) => {\n  // In a real implementation, this would call an API\n  console.log(`Generating ${format} debate on \"${topic}\" with ${experts.length} experts`);\n\n  // Create a simulated debate structure\n  const debate = {\n    id: uuidv4(),\n    topic,\n    format,\n    experts: experts.map(e => e.id),\n    stages: generateDebateStages(topic, experts, format),\n    arguments: generateArgumentMap(topic, experts),\n    consensus: generateConsensusMap(experts),\n    created: new Date().toISOString()\n  };\n  return debate;\n};\nconst generateDebateStages = (topic, experts, format) => {\n  // This would be AI-generated in a real implementation\n  const introStage = {\n    id: 'stage-intro',\n    type: 'introduction',\n    title: 'Introduction',\n    content: `Welcome to our debate on \"${topic}\". Today we have ${experts.length} experts who will present diverse perspectives on this important topic.`,\n    timestamp: 0\n  };\n\n  // Generate opening statements for each expert\n  const openingStatements = experts.map((expert, index) => {\n    return {\n      id: `stage-opening-${index}`,\n      type: 'statement',\n      speaker: expert.id,\n      title: `${expert.name}'s Opening`,\n      content: generateOpeningStatement(topic, expert),\n      arguments: [`arg-${expert.id}-main`, `arg-${expert.id}-support-1`, `arg-${expert.id}-support-2`],\n      timestamp: (index + 1) * 120\n    };\n  });\n\n  // Generate some debate exchanges\n  const exchanges = [];\n  for (let i = 0; i < Math.min(experts.length * 2, 8); i++) {\n    const speakerIndex = i % experts.length;\n    const respondingTo = speakerIndex === 0 ? experts[experts.length - 1].id : experts[speakerIndex - 1].id;\n    exchanges.push({\n      id: `stage-exchange-${i}`,\n      type: 'exchange',\n      speaker: experts[speakerIndex].id,\n      respondingTo,\n      title: `Response to ${experts[speakerIndex === 0 ? experts.length - 1 : speakerIndex - 1].name}`,\n      content: generateExchangeContent(topic, experts[speakerIndex], respondingTo),\n      arguments: [`arg-${experts[speakerIndex].id}-response-${i}`, `arg-${experts[speakerIndex].id}-counter-${i}`],\n      timestamp: openingStatements[openingStatements.length - 1].timestamp + (i + 1) * 180\n    });\n  }\n\n  // Final statements\n  const closingStatements = experts.map((expert, index) => {\n    return {\n      id: `stage-closing-${index}`,\n      type: 'closing',\n      speaker: expert.id,\n      title: `${expert.name}'s Conclusion`,\n      content: generateClosingStatement(topic, expert),\n      timestamp: exchanges[exchanges.length - 1].timestamp + (index + 1) * 120\n    };\n  });\n\n  // Summary\n  const summary = {\n    id: 'stage-summary',\n    type: 'summary',\n    title: 'Debate Summary',\n    content: generateSummary(topic, experts),\n    timestamp: closingStatements[closingStatements.length - 1].timestamp + 120\n  };\n  return [introStage, ...openingStatements, ...exchanges, ...closingStatements, summary];\n};\nconst generateArgumentMap = (topic, experts) => {\n  // In a real implementation, this would be AI-generated\n  const argumentMap = {};\n  experts.forEach(expert => {\n    // Main argument\n    argumentMap[`arg-${expert.id}-main`] = {\n      id: `arg-${expert.id}-main`,\n      type: 'claim',\n      content: generateMainArgument(topic, expert),\n      speaker: expert.id,\n      strength: 0.7 + Math.random() * 0.3,\n      evidence: [`evidence-${expert.id}-1`, `evidence-${expert.id}-2`],\n      supports: [],\n      opposes: generateOppositions(expert, experts)\n    };\n\n    // Supporting arguments\n    argumentMap[`arg-${expert.id}-support-1`] = {\n      id: `arg-${expert.id}-support-1`,\n      type: 'supporting',\n      content: `Supporting point for ${expert.name}'s perspective on ${topic}`,\n      speaker: expert.id,\n      strength: 0.6 + Math.random() * 0.4,\n      evidence: [`evidence-${expert.id}-3`],\n      supports: [`arg-${expert.id}-main`],\n      opposes: []\n    };\n    argumentMap[`arg-${expert.id}-support-2`] = {\n      id: `arg-${expert.id}-support-2`,\n      type: 'supporting',\n      content: `Additional evidence supporting ${expert.name}'s view`,\n      speaker: expert.id,\n      strength: 0.5 + Math.random() * 0.5,\n      evidence: [`evidence-${expert.id}-4`],\n      supports: [`arg-${expert.id}-main`],\n      opposes: []\n    };\n\n    // Response arguments\n    for (let i = 0; i < Math.min(experts.length * 2, 8); i++) {\n      if (i % experts.length === experts.findIndex(e => e.id === expert.id)) {\n        argumentMap[`arg-${expert.id}-response-${i}`] = {\n          id: `arg-${expert.id}-response-${i}`,\n          type: 'response',\n          content: `${expert.name}'s response to previous point`,\n          speaker: expert.id,\n          strength: 0.4 + Math.random() * 0.6,\n          evidence: [],\n          supports: [],\n          opposes: []\n        };\n        argumentMap[`arg-${expert.id}-counter-${i}`] = {\n          id: `arg-${expert.id}-counter-${i}`,\n          type: 'counter',\n          content: `Counter-argument from ${expert.name}`,\n          speaker: expert.id,\n          strength: 0.5 + Math.random() * 0.5,\n          evidence: [],\n          supports: [`arg-${expert.id}-response-${i}`],\n          opposes: []\n        };\n      }\n    }\n\n    // Evidence entries\n    argumentMap[`evidence-${expert.id}-1`] = {\n      id: `evidence-${expert.id}-1`,\n      type: 'research',\n      content: `Primary research supporting ${expert.name}'s perspective`,\n      citation: `Journal of ${expert.expertise[0].charAt(0).toUpperCase() + expert.expertise[0].slice(1)}, 2023`,\n      url: '#',\n      credibility: 0.8 + Math.random() * 0.2\n    };\n    argumentMap[`evidence-${expert.id}-2`] = {\n      id: `evidence-${expert.id}-2`,\n      type: 'statistics',\n      content: `Statistical evidence related to ${topic}`,\n      citation: 'Global Research Institute, 2024',\n      url: '#',\n      credibility: 0.7 + Math.random() * 0.3\n    };\n    argumentMap[`evidence-${expert.id}-3`] = {\n      id: `evidence-${expert.id}-3`,\n      type: 'expert_opinion',\n      content: `Expert consensus in the field of ${expert.expertise[0]}`,\n      citation: `${expert.expertise[0].charAt(0).toUpperCase() + expert.expertise[0].slice(1)} Review, 2024`,\n      url: '#',\n      credibility: 0.6 + Math.random() * 0.4\n    };\n    argumentMap[`evidence-${expert.id}-4`] = {\n      id: `evidence-${expert.id}-4`,\n      type: 'case_study',\n      content: `Case study demonstrating key aspects of ${expert.name}'s argument`,\n      citation: 'International Conference on ' + expert.expertise[1].charAt(0).toUpperCase() + expert.expertise[1].slice(1) + ', 2023',\n      url: '#',\n      credibility: 0.65 + Math.random() * 0.35\n    };\n  });\n  return argumentMap;\n};\nconst generateConsensusMap = experts => {\n  // In a real implementation, this would be AI-generated\n  return {\n    full_agreement: [{\n      id: 'consensus-1',\n      content: 'The importance of examining this topic from multiple disciplinary perspectives',\n      strength: 0.9,\n      experts: experts.map(e => e.id)\n    }, {\n      id: 'consensus-2',\n      content: 'The need for further research and evidence in key areas',\n      strength: 0.85,\n      experts: experts.map(e => e.id)\n    }],\n    partial_agreement: [{\n      id: 'partial-1',\n      content: 'The ethical implications deserve significant consideration',\n      strength: 0.7,\n      experts: experts.filter((_, i) => i % 2 === 0).map(e => e.id)\n    }, {\n      id: 'partial-2',\n      content: 'Practical implementation challenges need to be addressed',\n      strength: 0.65,\n      experts: experts.filter((_, i) => i % 3 === 0).map(e => e.id)\n    }],\n    key_disagreements: [{\n      id: 'disagree-1',\n      content: 'The fundamental approach to addressing the main issue',\n      experts_a: experts.filter((_, i) => i < experts.length / 2).map(e => e.id),\n      experts_b: experts.filter((_, i) => i >= experts.length / 2).map(e => e.id),\n      intensity: 0.8\n    }, {\n      id: 'disagree-2',\n      content: 'The prioritization of various considerations',\n      experts_a: [experts[0].id, experts[2].id],\n      experts_b: [experts[1].id, experts[3].id],\n      intensity: 0.75\n    }]\n  };\n};\n\n// Helper functions to generate content\nconst generateOpeningStatement = (topic, expert) => {\n  return `From my perspective as a ${expert.title}, the topic of \"${topic}\" is particularly important when viewed through the lens of ${expert.expertise.join(', ')}. My research suggests that we need to consider several key factors...`;\n};\nconst generateExchangeContent = (topic, expert, respondingTo) => {\n  return `While I appreciate the perspective offered, I would approach this differently based on my background in ${expert.expertise[0]}. The evidence suggests that...`;\n};\nconst generateClosingStatement = (topic, expert) => {\n  return `In conclusion, my position on \"${topic}\" emphasizes the importance of ${expert.expertise[1]} considerations. The key takeaway I'd like to leave you with is...`;\n};\nconst generateSummary = (topic, experts) => {\n  return `This debate on \"${topic}\" has explored diverse perspectives from ${experts.length} experts. Key points of consensus included the importance of multiple disciplinary approaches, while disagreements centered on fundamental approaches and priorities.`;\n};\nconst generateMainArgument = (topic, expert) => {\n  return `The most critical aspect of \"${topic}\" relates to its implications for ${expert.expertise[0]} and ${expert.expertise[1]}, which my research suggests is often overlooked.`;\n};\nconst generateOppositions = (expert, allExperts) => {\n  // Generate an array of arguments this expert opposes\n  const opposedExperts = allExperts.filter(e => e.id !== expert.id).slice(0, 2).map(e => `arg-${e.id}-main`);\n  return opposedExperts;\n};\n\n// Additional API methods that would be implemented in a full version\nexport const askFollowUpQuestion = (debateId, question) => {\n  // This would call an API to get a response\n  console.log(`Asking follow-up: ${question} for debate ${debateId}`);\n  return Promise.resolve({\n    id: uuidv4(),\n    question,\n    response: `This is a simulated response to your question: \"${question}\"`,\n    relevantArguments: []\n  });\n};\nexport const challengeAssumption = (debateId, argumentId, challenge) => {\n  // This would call an API to get a response\n  console.log(`Challenging argument ${argumentId} with: ${challenge}`);\n  return Promise.resolve({\n    id: uuidv4(),\n    challenge,\n    response: `This is a simulated response to your challenge of the assumption in argument ${argumentId}`,\n    updatedArgument: null\n  });\n};\nexport const requestEvidence = (debateId, argumentId) => {\n  // This would call an API to get additional evidence\n  console.log(`Requesting more evidence for argument ${argumentId}`);\n  return Promise.resolve({\n    id: uuidv4(),\n    evidence: [{\n      type: 'research',\n      content: 'Additional research evidence for the requested argument',\n      citation: 'Journal of Relevant Studies, 2024',\n      url: '#',\n      credibility: 0.85\n    }]\n  });\n};\nexport const generateSteelmanArgument = (debateId, argumentId) => {\n  // This would call an API to get a strengthened version of the argument\n  console.log(`Generating steelman for argument ${argumentId}`);\n  return Promise.resolve({\n    id: uuidv4(),\n    originalArgument: argumentId,\n    steelmanArgument: {\n      content: 'This is a strengthened version of the original argument that addresses its potential weaknesses and represents the position at its strongest.',\n      strength: 0.9\n    }\n  });\n};\nexport const introduceNewConsideration = (debateId, consideration) => {\n  // This would call an API to introduce a new perspective\n  console.log(`Introducing new consideration: ${consideration}`);\n  return Promise.resolve({\n    id: uuidv4(),\n    consideration,\n    response: `This is a simulated response to your introduction of a new consideration: \"${consideration}\"`,\n    relevance: 0.8\n  });\n};","map":{"version":3,"names":["v4","uuidv4","generateDebate","topic","experts","format","console","log","length","debate","id","map","e","stages","generateDebateStages","arguments","generateArgumentMap","consensus","generateConsensusMap","created","Date","toISOString","introStage","type","title","content","timestamp","openingStatements","expert","index","speaker","name","generateOpeningStatement","exchanges","i","Math","min","speakerIndex","respondingTo","push","generateExchangeContent","closingStatements","generateClosingStatement","summary","generateSummary","argumentMap","forEach","generateMainArgument","strength","random","evidence","supports","opposes","generateOppositions","findIndex","citation","expertise","charAt","toUpperCase","slice","url","credibility","full_agreement","partial_agreement","filter","_","key_disagreements","experts_a","experts_b","intensity","join","allExperts","opposedExperts","askFollowUpQuestion","debateId","question","Promise","resolve","response","relevantArguments","challengeAssumption","argumentId","challenge","updatedArgument","requestEvidence","generateSteelmanArgument","originalArgument","steelmanArgument","introduceNewConsideration","consideration","relevance"],"sources":["C:/Users/HAJAR/socratic-debate-simulator/src/services/debateService.js"],"sourcesContent":["// src/services/debateService.js\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// This service would normally make API calls to an LLM backend\r\n// For now, we'll simulate the debate generation\r\n\r\nexport const generateDebate = (topic, experts, format) => {\r\n  // In a real implementation, this would call an API\r\n  console.log(`Generating ${format} debate on \"${topic}\" with ${experts.length} experts`);\r\n  \r\n  // Create a simulated debate structure\r\n  const debate = {\r\n    id: uuidv4(),\r\n    topic,\r\n    format,\r\n    experts: experts.map(e => e.id),\r\n    stages: generateDebateStages(topic, experts, format),\r\n    arguments: generateArgumentMap(topic, experts),\r\n    consensus: generateConsensusMap(experts),\r\n    created: new Date().toISOString()\r\n  };\r\n  \r\n  return debate;\r\n};\r\n\r\nconst generateDebateStages = (topic, experts, format) => {\r\n  // This would be AI-generated in a real implementation\r\n  const introStage = {\r\n    id: 'stage-intro',\r\n    type: 'introduction',\r\n    title: 'Introduction',\r\n    content: `Welcome to our debate on \"${topic}\". Today we have ${experts.length} experts who will present diverse perspectives on this important topic.`,\r\n    timestamp: 0\r\n  };\r\n  \r\n  // Generate opening statements for each expert\r\n  const openingStatements = experts.map((expert, index) => {\r\n    return {\r\n      id: `stage-opening-${index}`,\r\n      type: 'statement',\r\n      speaker: expert.id,\r\n      title: `${expert.name}'s Opening`,\r\n      content: generateOpeningStatement(topic, expert),\r\n      arguments: [\r\n        `arg-${expert.id}-main`,\r\n        `arg-${expert.id}-support-1`,\r\n        `arg-${expert.id}-support-2`\r\n      ],\r\n      timestamp: (index + 1) * 120\r\n    };\r\n  });\r\n  \r\n  // Generate some debate exchanges\r\n  const exchanges = [];\r\n  for (let i = 0; i < Math.min(experts.length * 2, 8); i++) {\r\n    const speakerIndex = i % experts.length;\r\n    const respondingTo = (speakerIndex === 0) ? \r\n      experts[experts.length - 1].id : \r\n      experts[speakerIndex - 1].id;\r\n    \r\n    exchanges.push({\r\n      id: `stage-exchange-${i}`,\r\n      type: 'exchange',\r\n      speaker: experts[speakerIndex].id,\r\n      respondingTo,\r\n      title: `Response to ${experts[(speakerIndex === 0) ? experts.length - 1 : speakerIndex - 1].name}`,\r\n      content: generateExchangeContent(topic, experts[speakerIndex], respondingTo),\r\n      arguments: [\r\n        `arg-${experts[speakerIndex].id}-response-${i}`,\r\n        `arg-${experts[speakerIndex].id}-counter-${i}`\r\n      ],\r\n      timestamp: openingStatements[openingStatements.length - 1].timestamp + ((i + 1) * 180)\r\n    });\r\n  }\r\n  \r\n  // Final statements\r\n  const closingStatements = experts.map((expert, index) => {\r\n    return {\r\n      id: `stage-closing-${index}`,\r\n      type: 'closing',\r\n      speaker: expert.id,\r\n      title: `${expert.name}'s Conclusion`,\r\n      content: generateClosingStatement(topic, expert),\r\n      timestamp: exchanges[exchanges.length - 1].timestamp + ((index + 1) * 120)\r\n    };\r\n  });\r\n  \r\n  // Summary\r\n  const summary = {\r\n    id: 'stage-summary',\r\n    type: 'summary',\r\n    title: 'Debate Summary',\r\n    content: generateSummary(topic, experts),\r\n    timestamp: closingStatements[closingStatements.length - 1].timestamp + 120\r\n  };\r\n  \r\n  return [introStage, ...openingStatements, ...exchanges, ...closingStatements, summary];\r\n};\r\n\r\nconst generateArgumentMap = (topic, experts) => {\r\n  // In a real implementation, this would be AI-generated\r\n  const argumentMap = {};\r\n  \r\n  experts.forEach(expert => {\r\n    // Main argument\r\n    argumentMap[`arg-${expert.id}-main`] = {\r\n      id: `arg-${expert.id}-main`,\r\n      type: 'claim',\r\n      content: generateMainArgument(topic, expert),\r\n      speaker: expert.id,\r\n      strength: 0.7 + Math.random() * 0.3,\r\n      evidence: [`evidence-${expert.id}-1`, `evidence-${expert.id}-2`],\r\n      supports: [],\r\n      opposes: generateOppositions(expert, experts)\r\n    };\r\n    \r\n    // Supporting arguments\r\n    argumentMap[`arg-${expert.id}-support-1`] = {\r\n      id: `arg-${expert.id}-support-1`,\r\n      type: 'supporting',\r\n      content: `Supporting point for ${expert.name}'s perspective on ${topic}`,\r\n      speaker: expert.id,\r\n      strength: 0.6 + Math.random() * 0.4,\r\n      evidence: [`evidence-${expert.id}-3`],\r\n      supports: [`arg-${expert.id}-main`],\r\n      opposes: []\r\n    };\r\n    \r\n    argumentMap[`arg-${expert.id}-support-2`] = {\r\n      id: `arg-${expert.id}-support-2`,\r\n      type: 'supporting',\r\n      content: `Additional evidence supporting ${expert.name}'s view`,\r\n      speaker: expert.id,\r\n      strength: 0.5 + Math.random() * 0.5,\r\n      evidence: [`evidence-${expert.id}-4`],\r\n      supports: [`arg-${expert.id}-main`],\r\n      opposes: []\r\n    };\r\n    \r\n    // Response arguments\r\n    for (let i = 0; i < Math.min(experts.length * 2, 8); i++) {\r\n      if (i % experts.length === experts.findIndex(e => e.id === expert.id)) {\r\n        argumentMap[`arg-${expert.id}-response-${i}`] = {\r\n          id: `arg-${expert.id}-response-${i}`,\r\n          type: 'response',\r\n          content: `${expert.name}'s response to previous point`,\r\n          speaker: expert.id,\r\n          strength: 0.4 + Math.random() * 0.6,\r\n          evidence: [],\r\n          supports: [],\r\n          opposes: []\r\n        };\r\n        \r\n        argumentMap[`arg-${expert.id}-counter-${i}`] = {\r\n          id: `arg-${expert.id}-counter-${i}`,\r\n          type: 'counter',\r\n          content: `Counter-argument from ${expert.name}`,\r\n          speaker: expert.id,\r\n          strength: 0.5 + Math.random() * 0.5,\r\n          evidence: [],\r\n          supports: [`arg-${expert.id}-response-${i}`],\r\n          opposes: []\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Evidence entries\r\n    argumentMap[`evidence-${expert.id}-1`] = {\r\n      id: `evidence-${expert.id}-1`,\r\n      type: 'research',\r\n      content: `Primary research supporting ${expert.name}'s perspective`,\r\n      citation: `Journal of ${expert.expertise[0].charAt(0).toUpperCase() + expert.expertise[0].slice(1)}, 2023`,\r\n      url: '#',\r\n      credibility: 0.8 + Math.random() * 0.2\r\n    };\r\n    \r\n    argumentMap[`evidence-${expert.id}-2`] = {\r\n      id: `evidence-${expert.id}-2`,\r\n      type: 'statistics',\r\n      content: `Statistical evidence related to ${topic}`,\r\n      citation: 'Global Research Institute, 2024',\r\n      url: '#',\r\n      credibility: 0.7 + Math.random() * 0.3\r\n    };\r\n    \r\n    argumentMap[`evidence-${expert.id}-3`] = {\r\n      id: `evidence-${expert.id}-3`,\r\n      type: 'expert_opinion',\r\n      content: `Expert consensus in the field of ${expert.expertise[0]}`,\r\n      citation: `${expert.expertise[0].charAt(0).toUpperCase() + expert.expertise[0].slice(1)} Review, 2024`,\r\n      url: '#',\r\n      credibility: 0.6 + Math.random() * 0.4\r\n    };\r\n    \r\n    argumentMap[`evidence-${expert.id}-4`] = {\r\n      id: `evidence-${expert.id}-4`,\r\n      type: 'case_study',\r\n      content: `Case study demonstrating key aspects of ${expert.name}'s argument`,\r\n      citation: 'International Conference on ' + expert.expertise[1].charAt(0).toUpperCase() + expert.expertise[1].slice(1) + ', 2023',\r\n      url: '#',\r\n      credibility: 0.65 + Math.random() * 0.35\r\n    };\r\n  });\r\n  \r\n  return argumentMap;\r\n};\r\n\r\nconst generateConsensusMap = (experts) => {\r\n  // In a real implementation, this would be AI-generated\r\n  return {\r\n    full_agreement: [\r\n      {\r\n        id: 'consensus-1',\r\n        content: 'The importance of examining this topic from multiple disciplinary perspectives',\r\n        strength: 0.9,\r\n        experts: experts.map(e => e.id)\r\n      },\r\n      {\r\n        id: 'consensus-2',\r\n        content: 'The need for further research and evidence in key areas',\r\n        strength: 0.85,\r\n        experts: experts.map(e => e.id)\r\n      }\r\n    ],\r\n    partial_agreement: [\r\n      {\r\n        id: 'partial-1',\r\n        content: 'The ethical implications deserve significant consideration',\r\n        strength: 0.7,\r\n        experts: experts.filter((_, i) => i % 2 === 0).map(e => e.id)\r\n      },\r\n      {\r\n        id: 'partial-2',\r\n        content: 'Practical implementation challenges need to be addressed',\r\n        strength: 0.65,\r\n        experts: experts.filter((_, i) => i % 3 === 0).map(e => e.id)\r\n      }\r\n    ],\r\n    key_disagreements: [\r\n      {\r\n        id: 'disagree-1',\r\n        content: 'The fundamental approach to addressing the main issue',\r\n        experts_a: experts.filter((_, i) => i < experts.length / 2).map(e => e.id),\r\n        experts_b: experts.filter((_, i) => i >= experts.length / 2).map(e => e.id),\r\n        intensity: 0.8\r\n      },\r\n      {\r\n        id: 'disagree-2',\r\n        content: 'The prioritization of various considerations',\r\n        experts_a: [experts[0].id, experts[2].id],\r\n        experts_b: [experts[1].id, experts[3].id],\r\n        intensity: 0.75\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\n// Helper functions to generate content\r\nconst generateOpeningStatement = (topic, expert) => {\r\n  return `From my perspective as a ${expert.title}, the topic of \"${topic}\" is particularly important when viewed through the lens of ${expert.expertise.join(', ')}. My research suggests that we need to consider several key factors...`;\r\n};\r\n\r\nconst generateExchangeContent = (topic, expert, respondingTo) => {\r\n  return `While I appreciate the perspective offered, I would approach this differently based on my background in ${expert.expertise[0]}. The evidence suggests that...`;\r\n};\r\n\r\nconst generateClosingStatement = (topic, expert) => {\r\n  return `In conclusion, my position on \"${topic}\" emphasizes the importance of ${expert.expertise[1]} considerations. The key takeaway I'd like to leave you with is...`;\r\n};\r\n\r\nconst generateSummary = (topic, experts) => {\r\n  return `This debate on \"${topic}\" has explored diverse perspectives from ${experts.length} experts. Key points of consensus included the importance of multiple disciplinary approaches, while disagreements centered on fundamental approaches and priorities.`;\r\n};\r\n\r\nconst generateMainArgument = (topic, expert) => {\r\n  return `The most critical aspect of \"${topic}\" relates to its implications for ${expert.expertise[0]} and ${expert.expertise[1]}, which my research suggests is often overlooked.`;\r\n};\r\n\r\nconst generateOppositions = (expert, allExperts) => {\r\n  // Generate an array of arguments this expert opposes\r\n  const opposedExperts = allExperts\r\n    .filter(e => e.id !== expert.id)\r\n    .slice(0, 2)\r\n    .map(e => `arg-${e.id}-main`);\r\n  \r\n  return opposedExperts;\r\n};\r\n\r\n// Additional API methods that would be implemented in a full version\r\nexport const askFollowUpQuestion = (debateId, question) => {\r\n  // This would call an API to get a response\r\n  console.log(`Asking follow-up: ${question} for debate ${debateId}`);\r\n  return Promise.resolve({\r\n    id: uuidv4(),\r\n    question,\r\n    response: `This is a simulated response to your question: \"${question}\"`,\r\n    relevantArguments: []\r\n  });\r\n};\r\n\r\nexport const challengeAssumption = (debateId, argumentId, challenge) => {\r\n  // This would call an API to get a response\r\n  console.log(`Challenging argument ${argumentId} with: ${challenge}`);\r\n  return Promise.resolve({\r\n    id: uuidv4(),\r\n    challenge,\r\n    response: `This is a simulated response to your challenge of the assumption in argument ${argumentId}`,\r\n    updatedArgument: null\r\n  });\r\n};\r\n\r\nexport const requestEvidence = (debateId, argumentId) => {\r\n  // This would call an API to get additional evidence\r\n  console.log(`Requesting more evidence for argument ${argumentId}`);\r\n  return Promise.resolve({\r\n    id: uuidv4(),\r\n    evidence: [\r\n      {\r\n        type: 'research',\r\n        content: 'Additional research evidence for the requested argument',\r\n        citation: 'Journal of Relevant Studies, 2024',\r\n        url: '#',\r\n        credibility: 0.85\r\n      }\r\n    ]\r\n  });\r\n};\r\n\r\nexport const generateSteelmanArgument = (debateId, argumentId) => {\r\n  // This would call an API to get a strengthened version of the argument\r\n  console.log(`Generating steelman for argument ${argumentId}`);\r\n  return Promise.resolve({\r\n    id: uuidv4(),\r\n    originalArgument: argumentId,\r\n    steelmanArgument: {\r\n      content: 'This is a strengthened version of the original argument that addresses its potential weaknesses and represents the position at its strongest.',\r\n      strength: 0.9\r\n    }\r\n  });\r\n};\r\n\r\nexport const introduceNewConsideration = (debateId, consideration) => {\r\n  // This would call an API to introduce a new perspective\r\n  console.log(`Introducing new consideration: ${consideration}`);\r\n  return Promise.resolve({\r\n    id: uuidv4(),\r\n    consideration,\r\n    response: `This is a simulated response to your introduction of a new consideration: \"${consideration}\"`,\r\n    relevance: 0.8\r\n  });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}