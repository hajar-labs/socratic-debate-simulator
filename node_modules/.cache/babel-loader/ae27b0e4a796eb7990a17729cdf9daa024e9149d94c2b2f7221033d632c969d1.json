{"ast":null,"code":"// src/services/debateService.js\n\n/**\r\n * Generates a new debate based on topic and selected experts\r\n * @param {string} topic - The debate topic\r\n * @param {Array} selectedExperts - Array of expert IDs\r\n * @param {string} format - Debate format (standard, oxford, socratic)\r\n * @returns {Promise} - Promise resolving to debate data\r\n */\nexport const generateDebate = async (topic, selectedExperts, format = 'standard') => {\n  console.log(`Generating ${format} debate on \"${topic}\" with experts:`, selectedExperts);\n\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Mock debate generation response\n  return {\n    debateId: `debate-${Date.now()}`,\n    topic,\n    format,\n    experts: selectedExperts,\n    transcript: [{\n      expertId: selectedExperts[0],\n      content: `Let's begin our discussion on ${topic}. From my perspective...`,\n      timestamp: Date.now(),\n      citations: []\n    }],\n    argumentMap: {\n      nodes: [{\n        id: 'root',\n        label: topic,\n        type: 'topic'\n      }, {\n        id: 'arg1',\n        label: 'Initial perspective',\n        type: 'claim',\n        expertId: selectedExperts[0]\n      }],\n      edges: [{\n        source: 'arg1',\n        target: 'root',\n        type: 'supports'\n      }]\n    }\n  };\n};\n\n/**\r\n * Asks a follow-up question to a specific expert\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} expertId - The expert ID to ask\r\n * @param {string} question - The follow-up question\r\n * @returns {Promise} - Promise resolving to the expert's response\r\n */\nexport const askFollowUpQuestion = async (debateId, expertId, question) => {\n  console.log(`Asking expert ${expertId} in debate ${debateId}: \"${question}\"`);\n\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Mock response\n  return {\n    expertId,\n    content: `That's an interesting question about ${question}. My analysis suggests...`,\n    timestamp: Date.now(),\n    citations: [{\n      id: 'src1',\n      title: 'Example Source',\n      url: 'https://example.com',\n      type: 'journal'\n    }]\n  };\n};\n\n/**\r\n * Challenges an assumption made by an expert\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} argumentId - The argument ID being challenged\r\n * @param {string} challenge - The challenge description\r\n * @returns {Promise} - Promise resolving to responses from experts\r\n */\nexport const challengeAssumption = async (debateId, argumentId, challenge) => {\n  console.log(`Challenging assumption ${argumentId} in debate ${debateId}: \"${challenge}\"`);\n\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1200));\n\n  // Mock response\n  return {\n    responses: [{\n      expertId: 'expert1',\n      // This would normally be determined by whose argument was challenged\n      content: `I appreciate the challenge to my assumption. Let me clarify...`,\n      timestamp: Date.now(),\n      citations: []\n    }],\n    updatedArgumentMap: {\n      nodes: [\n        // Updated argument nodes would be here\n      ],\n      edges: [\n        // Updated connections between arguments\n      ]\n    }\n  };\n};\n\n/**\r\n * Requests evidence for a specific claim\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} argumentId - The argument ID needing evidence\r\n * @returns {Promise} - Promise resolving to evidence data\r\n */\nexport const requestEvidence = async (debateId, argumentId) => {\n  console.log(`Requesting evidence for argument ${argumentId} in debate ${debateId}`);\n\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 800));\n\n  // Mock evidence response\n  return {\n    argumentId,\n    evidence: [{\n      id: 'ev1',\n      type: 'research',\n      title: 'Example Research Study',\n      authors: 'Smith et al.',\n      year: 2023,\n      source: 'Journal of Example Studies',\n      url: 'https://example.com/research',\n      summary: 'This study found that...',\n      relevance: 'high',\n      credibilityScore: 0.87\n    }, {\n      id: 'ev2',\n      type: 'statistic',\n      title: 'Survey Results',\n      source: 'Global Statistics Institute',\n      year: 2024,\n      url: 'https://example.com/statistics',\n      summary: 'According to this survey, 72% of participants...',\n      relevance: 'medium',\n      credibilityScore: 0.79\n    }]\n  };\n};\n\n/**\r\n * Generates a steelman version of an argument\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} argumentId - The argument ID to strengthen\r\n * @returns {Promise} - Promise resolving to strengthened argument\r\n */\nexport const generateSteelmanArgument = async (debateId, argumentId) => {\n  console.log(`Generating steelman for argument ${argumentId} in debate ${debateId}`);\n\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1100));\n\n  // Mock steelman response\n  return {\n    argumentId,\n    originalArgument: 'The original argument text would be here...',\n    steelmanVersion: 'A stronger version of the argument would be: The evidence suggests that...',\n    additionalEvidence: [{\n      id: 'stev1',\n      type: 'research',\n      title: 'Supporting Research',\n      source: 'Academic Journal',\n      url: 'https://example.com/supporting-research',\n      relevance: 'high'\n    }]\n  };\n};\n\n/**\r\n * Introduces a new consideration to the debate\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} consideration - The new consideration to introduce\r\n * @returns {Promise} - Promise resolving to expert responses\r\n */\nexport const introduceNewConsideration = async (debateId, consideration) => {\n  console.log(`Introducing new consideration in debate ${debateId}: \"${consideration}\"`);\n\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1300));\n\n  // Mock response with expert reactions\n  return {\n    consideration,\n    responses: [{\n      expertId: 'expert1',\n      content: `That's an important consideration. In my view...`,\n      timestamp: Date.now(),\n      citations: []\n    }, {\n      expertId: 'expert2',\n      content: `I'd approach that consideration differently. Consider that...`,\n      timestamp: Date.now(),\n      citations: []\n    }],\n    updatedArgumentMap: {\n      nodes: [\n      // Updated argument nodes would be here\n      {\n        id: 'new-node',\n        label: consideration,\n        type: 'consideration'\n      }],\n      edges: [\n        // New connections to the consideration\n      ]\n    }\n  };\n};\n\n// Add a default export that includes all individual functions\nexport default {\n  generateDebate,\n  askFollowUpQuestion,\n  challengeAssumption,\n  requestEvidence,\n  generateSteelmanArgument,\n  introduceNewConsideration\n};","map":{"version":3,"names":["generateDebate","topic","selectedExperts","format","console","log","Promise","resolve","setTimeout","debateId","Date","now","experts","transcript","expertId","content","timestamp","citations","argumentMap","nodes","id","label","type","edges","source","target","askFollowUpQuestion","question","title","url","challengeAssumption","argumentId","challenge","responses","updatedArgumentMap","requestEvidence","evidence","authors","year","summary","relevance","credibilityScore","generateSteelmanArgument","originalArgument","steelmanVersion","additionalEvidence","introduceNewConsideration","consideration"],"sources":["C:/Users/HAJAR/socratic-debate-simulator/src/services/debateService.js"],"sourcesContent":["// src/services/debateService.js\r\n\r\n/**\r\n * Generates a new debate based on topic and selected experts\r\n * @param {string} topic - The debate topic\r\n * @param {Array} selectedExperts - Array of expert IDs\r\n * @param {string} format - Debate format (standard, oxford, socratic)\r\n * @returns {Promise} - Promise resolving to debate data\r\n */\r\nexport const generateDebate = async (topic, selectedExperts, format = 'standard') => {\r\n  console.log(`Generating ${format} debate on \"${topic}\" with experts:`, selectedExperts);\r\n  \r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 1500));\r\n  \r\n  // Mock debate generation response\r\n  return {\r\n    debateId: `debate-${Date.now()}`,\r\n    topic,\r\n    format,\r\n    experts: selectedExperts,\r\n    transcript: [\r\n      {\r\n        expertId: selectedExperts[0],\r\n        content: `Let's begin our discussion on ${topic}. From my perspective...`,\r\n        timestamp: Date.now(),\r\n        citations: [],\r\n      }\r\n    ],\r\n    argumentMap: {\r\n      nodes: [\r\n        { id: 'root', label: topic, type: 'topic' },\r\n        { id: 'arg1', label: 'Initial perspective', type: 'claim', expertId: selectedExperts[0] }\r\n      ],\r\n      edges: [\r\n        { source: 'arg1', target: 'root', type: 'supports' }\r\n      ]\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Asks a follow-up question to a specific expert\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} expertId - The expert ID to ask\r\n * @param {string} question - The follow-up question\r\n * @returns {Promise} - Promise resolving to the expert's response\r\n */\r\nexport const askFollowUpQuestion = async (debateId, expertId, question) => {\r\n  console.log(`Asking expert ${expertId} in debate ${debateId}: \"${question}\"`);\r\n  \r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 1000));\r\n  \r\n  // Mock response\r\n  return {\r\n    expertId,\r\n    content: `That's an interesting question about ${question}. My analysis suggests...`,\r\n    timestamp: Date.now(),\r\n    citations: [\r\n      { id: 'src1', title: 'Example Source', url: 'https://example.com', type: 'journal' }\r\n    ]\r\n  };\r\n};\r\n\r\n/**\r\n * Challenges an assumption made by an expert\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} argumentId - The argument ID being challenged\r\n * @param {string} challenge - The challenge description\r\n * @returns {Promise} - Promise resolving to responses from experts\r\n */\r\nexport const challengeAssumption = async (debateId, argumentId, challenge) => {\r\n  console.log(`Challenging assumption ${argumentId} in debate ${debateId}: \"${challenge}\"`);\r\n  \r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 1200));\r\n  \r\n  // Mock response\r\n  return {\r\n    responses: [\r\n      {\r\n        expertId: 'expert1', // This would normally be determined by whose argument was challenged\r\n        content: `I appreciate the challenge to my assumption. Let me clarify...`,\r\n        timestamp: Date.now(),\r\n        citations: [],\r\n      }\r\n    ],\r\n    updatedArgumentMap: {\r\n      nodes: [\r\n        // Updated argument nodes would be here\r\n      ],\r\n      edges: [\r\n        // Updated connections between arguments\r\n      ]\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Requests evidence for a specific claim\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} argumentId - The argument ID needing evidence\r\n * @returns {Promise} - Promise resolving to evidence data\r\n */\r\nexport const requestEvidence = async (debateId, argumentId) => {\r\n  console.log(`Requesting evidence for argument ${argumentId} in debate ${debateId}`);\r\n  \r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 800));\r\n  \r\n  // Mock evidence response\r\n  return {\r\n    argumentId,\r\n    evidence: [\r\n      {\r\n        id: 'ev1',\r\n        type: 'research',\r\n        title: 'Example Research Study',\r\n        authors: 'Smith et al.',\r\n        year: 2023,\r\n        source: 'Journal of Example Studies',\r\n        url: 'https://example.com/research',\r\n        summary: 'This study found that...',\r\n        relevance: 'high',\r\n        credibilityScore: 0.87\r\n      },\r\n      {\r\n        id: 'ev2',\r\n        type: 'statistic',\r\n        title: 'Survey Results',\r\n        source: 'Global Statistics Institute',\r\n        year: 2024,\r\n        url: 'https://example.com/statistics',\r\n        summary: 'According to this survey, 72% of participants...',\r\n        relevance: 'medium',\r\n        credibilityScore: 0.79\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\n/**\r\n * Generates a steelman version of an argument\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} argumentId - The argument ID to strengthen\r\n * @returns {Promise} - Promise resolving to strengthened argument\r\n */\r\nexport const generateSteelmanArgument = async (debateId, argumentId) => {\r\n  console.log(`Generating steelman for argument ${argumentId} in debate ${debateId}`);\r\n  \r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 1100));\r\n  \r\n  // Mock steelman response\r\n  return {\r\n    argumentId,\r\n    originalArgument: 'The original argument text would be here...',\r\n    steelmanVersion: 'A stronger version of the argument would be: The evidence suggests that...',\r\n    additionalEvidence: [\r\n      {\r\n        id: 'stev1',\r\n        type: 'research',\r\n        title: 'Supporting Research',\r\n        source: 'Academic Journal',\r\n        url: 'https://example.com/supporting-research',\r\n        relevance: 'high'\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\n/**\r\n * Introduces a new consideration to the debate\r\n * @param {string} debateId - The current debate ID\r\n * @param {string} consideration - The new consideration to introduce\r\n * @returns {Promise} - Promise resolving to expert responses\r\n */\r\nexport const introduceNewConsideration = async (debateId, consideration) => {\r\n  console.log(`Introducing new consideration in debate ${debateId}: \"${consideration}\"`);\r\n  \r\n  // Simulate API delay\r\n  await new Promise(resolve => setTimeout(resolve, 1300));\r\n  \r\n  // Mock response with expert reactions\r\n  return {\r\n    consideration,\r\n    responses: [\r\n      {\r\n        expertId: 'expert1',\r\n        content: `That's an important consideration. In my view...`,\r\n        timestamp: Date.now(),\r\n        citations: []\r\n      },\r\n      {\r\n        expertId: 'expert2',\r\n        content: `I'd approach that consideration differently. Consider that...`,\r\n        timestamp: Date.now(),\r\n        citations: []\r\n      }\r\n    ],\r\n    updatedArgumentMap: {\r\n      nodes: [\r\n        // Updated argument nodes would be here\r\n        { id: 'new-node', label: consideration, type: 'consideration' }\r\n      ],\r\n      edges: [\r\n        // New connections to the consideration\r\n      ]\r\n    }\r\n  };\r\n};\r\n\r\n// Add a default export that includes all individual functions\r\nexport default {\r\n  generateDebate,\r\n  askFollowUpQuestion,\r\n  challengeAssumption,\r\n  requestEvidence,\r\n  generateSteelmanArgument,\r\n  introduceNewConsideration\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}