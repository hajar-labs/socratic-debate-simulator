{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HAJAR\\\\socratic-debate-simulator\\\\src\\\\contexts\\\\DebateContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport debateService from '../services/debateService';\nimport analyticsService from '../services/analyticsService';\nimport { getUserPreferences } from '../services/userPreferences';\n\n// Initial state for the debate context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentDebate: null,\n  experts: [],\n  loading: false,\n  error: null,\n  arguments: [],\n  selectedArgument: null,\n  evidencePanelOpen: false,\n  selectedEvidence: null,\n  debateFormat: 'standard',\n  // standard, oxford, socratic\n  debateParameters: {\n    depth: 0.5,\n    // 0 to 1, balancing depth vs breadth\n    technicalLevel: 'medium',\n    // beginner, medium, expert\n    emphasis: ['ethical', 'practical'] // ethical, practical, theoretical, historical\n  },\n  takeaways: null\n};\n\n// Actions\nexport const DEBATE_ACTIONS = {\n  START_LOADING: 'START_LOADING',\n  LOAD_DEBATE_SUCCESS: 'LOAD_DEBATE_SUCCESS',\n  LOAD_DEBATE_ERROR: 'LOAD_DEBATE_ERROR',\n  SET_EXPERTS: 'SET_EXPERTS',\n  SELECT_ARGUMENT: 'SELECT_ARGUMENT',\n  TOGGLE_EVIDENCE_PANEL: 'TOGGLE_EVIDENCE_PANEL',\n  SELECT_EVIDENCE: 'SELECT_EVIDENCE',\n  UPDATE_DEBATE_PARAMETERS: 'UPDATE_DEBATE_PARAMETERS',\n  ASK_FOLLOWUP_QUESTION: 'ASK_FOLLOWUP_QUESTION',\n  ADD_ARGUMENT: 'ADD_ARGUMENT',\n  UPDATE_DEBATE_FORMAT: 'UPDATE_DEBATE_FORMAT',\n  GENERATE_TAKEAWAYS: 'GENERATE_TAKEAWAYS',\n  SET_TAKEAWAYS: 'SET_TAKEAWAYS',\n  RESET_STATE: 'RESET_STATE'\n};\n\n// Reducer function\nconst debateReducer = (state, action) => {\n  var _state$selectedArgume, _action$payload, _state$selectedArgume2, _action$payload2;\n  switch (action.type) {\n    case DEBATE_ACTIONS.START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case DEBATE_ACTIONS.LOAD_DEBATE_SUCCESS:\n      return {\n        ...state,\n        currentDebate: action.payload,\n        arguments: action.payload.arguments || [],\n        loading: false,\n        error: null\n      };\n    case DEBATE_ACTIONS.LOAD_DEBATE_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case DEBATE_ACTIONS.SET_EXPERTS:\n      return {\n        ...state,\n        experts: action.payload\n      };\n    case DEBATE_ACTIONS.SELECT_ARGUMENT:\n      return {\n        ...state,\n        selectedArgument: action.payload,\n        // Close evidence panel if we're changing arguments\n        evidencePanelOpen: ((_state$selectedArgume = state.selectedArgument) === null || _state$selectedArgume === void 0 ? void 0 : _state$selectedArgume.id) === ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.id) ? state.evidencePanelOpen : false,\n        selectedEvidence: ((_state$selectedArgume2 = state.selectedArgument) === null || _state$selectedArgume2 === void 0 ? void 0 : _state$selectedArgume2.id) === ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.id) ? state.selectedEvidence : null\n      };\n    case DEBATE_ACTIONS.TOGGLE_EVIDENCE_PANEL:\n      return {\n        ...state,\n        evidencePanelOpen: action.payload !== undefined ? action.payload : !state.evidencePanelOpen\n      };\n    case DEBATE_ACTIONS.SELECT_EVIDENCE:\n      return {\n        ...state,\n        selectedEvidence: action.payload,\n        evidencePanelOpen: action.payload !== null\n      };\n    case DEBATE_ACTIONS.UPDATE_DEBATE_PARAMETERS:\n      return {\n        ...state,\n        debateParameters: {\n          ...state.debateParameters,\n          ...action.payload\n        }\n      };\n    case DEBATE_ACTIONS.ADD_ARGUMENT:\n      return {\n        ...state,\n        arguments: [...state.arguments, action.payload],\n        // Select the new argument\n        selectedArgument: action.payload\n      };\n    case DEBATE_ACTIONS.UPDATE_DEBATE_FORMAT:\n      return {\n        ...state,\n        debateFormat: action.payload\n      };\n    case DEBATE_ACTIONS.GENERATE_TAKEAWAYS:\n      return {\n        ...state,\n        loading: true\n      };\n    case DEBATE_ACTIONS.SET_TAKEAWAYS:\n      return {\n        ...state,\n        takeaways: action.payload,\n        loading: false\n      };\n    case DEBATE_ACTIONS.RESET_STATE:\n      return {\n        ...initialState,\n        // Keep experts list\n        experts: state.experts\n      };\n    default:\n      return state;\n  }\n};\n\n// Create the context\nexport const DebateContext = /*#__PURE__*/createContext();\n\n// Context provider component\nexport const DebateContextProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(debateReducer, initialState);\n  const params = useParams();\n  const navigate = useNavigate();\n\n  // Load user preferences on mount\n  useEffect(() => {\n    try {\n      const userPrefs = getUserPreferences();\n\n      // Set debate format from user preferences if available\n      if (userPrefs.debateFormat) {\n        dispatch({\n          type: DEBATE_ACTIONS.UPDATE_DEBATE_FORMAT,\n          payload: userPrefs.debateFormat\n        });\n      }\n\n      // Set debate parameters from user preferences if available\n      if (userPrefs.technicalLevel || userPrefs.focusAreas) {\n        dispatch({\n          type: DEBATE_ACTIONS.UPDATE_DEBATE_PARAMETERS,\n          payload: {\n            technicalLevel: userPrefs.technicalLevel || state.debateParameters.technicalLevel,\n            emphasis: userPrefs.focusAreas || state.debateParameters.emphasis\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading user preferences for debate:', error);\n    }\n  }, []);\n\n  // Load debate if debateId is in the URL\n  useEffect(() => {\n    if (params.debateId) {\n      loadDebate(params.debateId);\n    }\n  }, [params.debateId]);\n\n  // Load a debate by ID\n  const loadDebate = async debateId => {\n    if (!debateId) return;\n    dispatch({\n      type: DEBATE_ACTIONS.START_LOADING\n    });\n    try {\n      var _debate$experts;\n      const debate = await debateService.getDebateById(debateId);\n      dispatch({\n        type: DEBATE_ACTIONS.LOAD_DEBATE_SUCCESS,\n        payload: debate\n      });\n\n      // Track debate view\n      analyticsService.trackDebateEvent(analyticsService.ANALYTICS_EVENTS.DEBATE_STARTED, debateId, {\n        topic: debate.topic,\n        format: debate.format,\n        expertCount: ((_debate$experts = debate.experts) === null || _debate$experts === void 0 ? void 0 : _debate$experts.length) || 0\n      });\n\n      // Load experts if needed\n      if (debate.experts && debate.experts.length > 0) {\n        dispatch({\n          type: DEBATE_ACTIONS.SET_EXPERTS,\n          payload: debate.experts\n        });\n      }\n      return debate;\n    } catch (error) {\n      dispatch({\n        type: DEBATE_ACTIONS.LOAD_DEBATE_ERROR,\n        payload: error.message\n      });\n      console.error('Error loading debate:', error);\n      return null;\n    }\n  };\n\n  // Start a new debate\n  const startNewDebate = async (topic, selectedExperts, format = state.debateFormat) => {\n    dispatch({\n      type: DEBATE_ACTIONS.START_LOADING\n    });\n    try {\n      var _newDebate$experts;\n      const newDebate = await debateService.createDebate({\n        topic,\n        experts: selectedExperts,\n        format,\n        parameters: state.debateParameters\n      });\n      dispatch({\n        type: DEBATE_ACTIONS.LOAD_DEBATE_SUCCESS,\n        payload: newDebate\n      });\n\n      // Track debate creation\n      analyticsService.trackDebateEvent(analyticsService.ANALYTICS_EVENTS.DEBATE_STARTED, newDebate.id, {\n        topic: newDebate.topic,\n        format: newDebate.format,\n        expertCount: ((_newDebate$experts = newDebate.experts) === null || _newDebate$experts === void 0 ? void 0 : _newDebate$experts.length) || 0,\n        isNew: true\n      });\n\n      // Navigate to the new debate\n      navigate(`/debate/${newDebate.id}`);\n      return newDebate;\n    } catch (error) {\n      dispatch({\n        type: DEBATE_ACTIONS.LOAD_DEBATE_ERROR,\n        payload: error.message\n      });\n      console.error('Error creating debate:', error);\n      return null;\n    }\n  };\n\n  // Select an argument\n  const selectArgument = argument => {\n    dispatch({\n      type: DEBATE_ACTIONS.SELECT_ARGUMENT,\n      payload: argument\n    });\n    if (argument) {\n      analyticsService.trackContentEngagement('argument', argument.id, {\n        type: 'select',\n        expertId: argument.expertId\n      });\n    }\n  };\n\n  // Toggle evidence panel\n  const toggleEvidencePanel = isOpen => {\n    dispatch({\n      type: DEBATE_ACTIONS.TOGGLE_EVIDENCE_PANEL,\n      payload: isOpen\n    });\n    if (isOpen && state.selectedArgument) {\n      analyticsService.trackContentEngagement('evidence_panel', state.selectedArgument.id, {\n        type: 'open',\n        argumentId: state.selectedArgument.id\n      });\n    }\n  };\n\n  // Select evidence to view\n  const selectEvidence = evidence => {\n    dispatch({\n      type: DEBATE_ACTIONS.SELECT_EVIDENCE,\n      payload: evidence\n    });\n    if (evidence) {\n      var _state$selectedArgume3;\n      analyticsService.trackContentEngagement('evidence', evidence.id, {\n        type: 'view',\n        argumentId: (_state$selectedArgume3 = state.selectedArgument) === null || _state$selectedArgume3 === void 0 ? void 0 : _state$selectedArgume3.id\n      });\n    }\n  };\n\n  // Update debate parameters\n  const updateDebateParameters = parameters => {\n    var _state$currentDebate;\n    dispatch({\n      type: DEBATE_ACTIONS.UPDATE_DEBATE_PARAMETERS,\n      payload: parameters\n    });\n\n    // If we have an active debate, update it\n    if ((_state$currentDebate = state.currentDebate) !== null && _state$currentDebate !== void 0 && _state$currentDebate.id) {\n      debateService.updateDebateParameters(state.currentDebate.id, {\n        ...state.debateParameters,\n        ...parameters\n      });\n      analyticsService.trackEvent(analyticsService.ANALYTICS_EVENTS.SETTINGS_CHANGED, {\n        parameters\n      });\n    }\n  };\n\n  // Ask a follow-up question\n  const askFollowupQuestion = async (question, targetExpertId = null) => {\n    var _state$currentDebate2;\n    if (!((_state$currentDebate2 = state.currentDebate) !== null && _state$currentDebate2 !== void 0 && _state$currentDebate2.id)) return null;\n    try {\n      const response = await debateService.askFollowupQuestion(state.currentDebate.id, question, targetExpertId);\n\n      // Add new arguments to the state\n      if (response.arguments && response.arguments.length > 0) {\n        response.arguments.forEach(argument => {\n          dispatch({\n            type: DEBATE_ACTIONS.ADD_ARGUMENT,\n            payload: argument\n          });\n        });\n      }\n      analyticsService.trackEvent(analyticsService.ANALYTICS_EVENTS.QUESTION_ASKED, {\n        debateId: state.currentDebate.id,\n        question,\n        targetExpertId\n      });\n      return response;\n    } catch (error) {\n      console.error('Error asking follow-up question:', error);\n      return null;\n    }\n  };\n\n  // Update debate format\n  const updateDebateFormat = format => {\n    var _state$currentDebate3;\n    dispatch({\n      type: DEBATE_ACTIONS.UPDATE_DEBATE_FORMAT,\n      payload: format\n    });\n\n    // If we have an active debate, update it\n    if ((_state$currentDebate3 = state.currentDebate) !== null && _state$currentDebate3 !== void 0 && _state$currentDebate3.id) {\n      debateService.updateDebateFormat(state.currentDebate.id, format);\n    }\n  };\n\n  // Generate takeaways from the debate\n  const generateTakeaways = async () => {\n    var _state$currentDebate4;\n    if (!((_state$currentDebate4 = state.currentDebate) !== null && _state$currentDebate4 !== void 0 && _state$currentDebate4.id)) return null;\n    dispatch({\n      type: DEBATE_ACTIONS.GENERATE_TAKEAWAYS\n    });\n    try {\n      const takeaways = await debateService.generateTakeaways(state.currentDebate.id);\n      dispatch({\n        type: DEBATE_ACTIONS.SET_TAKEAWAYS,\n        payload: takeaways\n      });\n      analyticsService.trackEvent(analyticsService.ANALYTICS_EVENTS.TAKEAWAY_GENERATED, {\n        debateId: state.currentDebate.id,\n        takeawayCount: Object.keys(takeaways).reduce((count, key) => count + takeaways[key].length, 0)\n      });\n      return takeaways;\n    } catch (error) {\n      dispatch({\n        type: DEBATE_ACTIONS.LOAD_DEBATE_ERROR,\n        payload: error.message\n      });\n      console.error('Error generating takeaways:', error);\n      return null;\n    }\n  };\n\n  // Reset the state\n  const resetState = () => {\n    dispatch({\n      type: DEBATE_ACTIONS.RESET_STATE\n    });\n  };\n\n  // Value to be provided by the context\n  const contextValue = {\n    ...state,\n    loadDebate,\n    startNewDebate,\n    selectArgument,\n    toggleEvidencePanel,\n    selectEvidence,\n    updateDebateParameters,\n    askFollowupQuestion,\n    updateDebateFormat,\n    generateTakeaways,\n    resetState\n  };\n  return /*#__PURE__*/_jsxDEV(DebateContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using the debate context\n_s(DebateContextProvider, \"aW07LBo+XPPL23NBsEF+7lyW0VI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = DebateContextProvider;\nexport const useDebateContext = () => {\n  _s2();\n  const context = useContext(DebateContext);\n  if (!context) {\n    throw new Error('useDebateContext must be used within a DebateContextProvider');\n  }\n  return context;\n};\n_s2(useDebateContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default {\n  DebateContextProvider,\n  useDebateContext\n};\nvar _c;\n$RefreshReg$(_c, \"DebateContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useParams","useNavigate","debateService","analyticsService","getUserPreferences","jsxDEV","_jsxDEV","initialState","currentDebate","experts","loading","error","arguments","selectedArgument","evidencePanelOpen","selectedEvidence","debateFormat","debateParameters","depth","technicalLevel","emphasis","takeaways","DEBATE_ACTIONS","START_LOADING","LOAD_DEBATE_SUCCESS","LOAD_DEBATE_ERROR","SET_EXPERTS","SELECT_ARGUMENT","TOGGLE_EVIDENCE_PANEL","SELECT_EVIDENCE","UPDATE_DEBATE_PARAMETERS","ASK_FOLLOWUP_QUESTION","ADD_ARGUMENT","UPDATE_DEBATE_FORMAT","GENERATE_TAKEAWAYS","SET_TAKEAWAYS","RESET_STATE","debateReducer","state","action","_state$selectedArgume","_action$payload","_state$selectedArgume2","_action$payload2","type","payload","id","undefined","DebateContext","DebateContextProvider","children","_s","dispatch","params","navigate","userPrefs","focusAreas","console","debateId","loadDebate","_debate$experts","debate","getDebateById","trackDebateEvent","ANALYTICS_EVENTS","DEBATE_STARTED","topic","format","expertCount","length","message","startNewDebate","selectedExperts","_newDebate$experts","newDebate","createDebate","parameters","isNew","selectArgument","argument","trackContentEngagement","expertId","toggleEvidencePanel","isOpen","argumentId","selectEvidence","evidence","_state$selectedArgume3","updateDebateParameters","_state$currentDebate","trackEvent","SETTINGS_CHANGED","askFollowupQuestion","question","targetExpertId","_state$currentDebate2","response","forEach","QUESTION_ASKED","updateDebateFormat","_state$currentDebate3","generateTakeaways","_state$currentDebate4","TAKEAWAY_GENERATED","takeawayCount","Object","keys","reduce","count","key","resetState","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDebateContext","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/HAJAR/socratic-debate-simulator/src/contexts/DebateContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport debateService from '../services/debateService';\r\nimport analyticsService from '../services/analyticsService';\r\nimport { getUserPreferences } from '../services/userPreferences';\r\n\r\n// Initial state for the debate context\r\nconst initialState = {\r\n  currentDebate: null,\r\n  experts: [],\r\n  loading: false,\r\n  error: null,\r\n  arguments: [],\r\n  selectedArgument: null,\r\n  evidencePanelOpen: false,\r\n  selectedEvidence: null,\r\n  debateFormat: 'standard', // standard, oxford, socratic\r\n  debateParameters: {\r\n    depth: 0.5, // 0 to 1, balancing depth vs breadth\r\n    technicalLevel: 'medium', // beginner, medium, expert\r\n    emphasis: ['ethical', 'practical'] // ethical, practical, theoretical, historical\r\n  },\r\n  takeaways: null\r\n};\r\n\r\n// Actions\r\nexport const DEBATE_ACTIONS = {\r\n  START_LOADING: 'START_LOADING',\r\n  LOAD_DEBATE_SUCCESS: 'LOAD_DEBATE_SUCCESS',\r\n  LOAD_DEBATE_ERROR: 'LOAD_DEBATE_ERROR',\r\n  SET_EXPERTS: 'SET_EXPERTS',\r\n  SELECT_ARGUMENT: 'SELECT_ARGUMENT',\r\n  TOGGLE_EVIDENCE_PANEL: 'TOGGLE_EVIDENCE_PANEL',\r\n  SELECT_EVIDENCE: 'SELECT_EVIDENCE',\r\n  UPDATE_DEBATE_PARAMETERS: 'UPDATE_DEBATE_PARAMETERS',\r\n  ASK_FOLLOWUP_QUESTION: 'ASK_FOLLOWUP_QUESTION',\r\n  ADD_ARGUMENT: 'ADD_ARGUMENT',\r\n  UPDATE_DEBATE_FORMAT: 'UPDATE_DEBATE_FORMAT',\r\n  GENERATE_TAKEAWAYS: 'GENERATE_TAKEAWAYS',\r\n  SET_TAKEAWAYS: 'SET_TAKEAWAYS',\r\n  RESET_STATE: 'RESET_STATE'\r\n};\r\n\r\n// Reducer function\r\nconst debateReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case DEBATE_ACTIONS.START_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.LOAD_DEBATE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentDebate: action.payload,\r\n        arguments: action.payload.arguments || [],\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.LOAD_DEBATE_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.SET_EXPERTS:\r\n      return {\r\n        ...state,\r\n        experts: action.payload\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.SELECT_ARGUMENT:\r\n      return {\r\n        ...state,\r\n        selectedArgument: action.payload,\r\n        // Close evidence panel if we're changing arguments\r\n        evidencePanelOpen: state.selectedArgument?.id === action.payload?.id \r\n          ? state.evidencePanelOpen \r\n          : false,\r\n        selectedEvidence: state.selectedArgument?.id === action.payload?.id \r\n          ? state.selectedEvidence \r\n          : null\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.TOGGLE_EVIDENCE_PANEL:\r\n      return {\r\n        ...state,\r\n        evidencePanelOpen: action.payload !== undefined ? action.payload : !state.evidencePanelOpen\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.SELECT_EVIDENCE:\r\n      return {\r\n        ...state,\r\n        selectedEvidence: action.payload,\r\n        evidencePanelOpen: action.payload !== null\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.UPDATE_DEBATE_PARAMETERS:\r\n      return {\r\n        ...state,\r\n        debateParameters: {\r\n          ...state.debateParameters,\r\n          ...action.payload\r\n        }\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.ADD_ARGUMENT:\r\n      return {\r\n        ...state,\r\n        arguments: [...state.arguments, action.payload],\r\n        // Select the new argument\r\n        selectedArgument: action.payload\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.UPDATE_DEBATE_FORMAT:\r\n      return {\r\n        ...state,\r\n        debateFormat: action.payload\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.GENERATE_TAKEAWAYS:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.SET_TAKEAWAYS:\r\n      return {\r\n        ...state,\r\n        takeaways: action.payload,\r\n        loading: false\r\n      };\r\n    \r\n    case DEBATE_ACTIONS.RESET_STATE:\r\n      return {\r\n        ...initialState,\r\n        // Keep experts list\r\n        experts: state.experts\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create the context\r\nexport const DebateContext = createContext();\r\n\r\n// Context provider component\r\nexport const DebateContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(debateReducer, initialState);\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  \r\n  // Load user preferences on mount\r\n  useEffect(() => {\r\n    try {\r\n      const userPrefs = getUserPreferences();\r\n      \r\n      // Set debate format from user preferences if available\r\n      if (userPrefs.debateFormat) {\r\n        dispatch({\r\n          type: DEBATE_ACTIONS.UPDATE_DEBATE_FORMAT,\r\n          payload: userPrefs.debateFormat\r\n        });\r\n      }\r\n      \r\n      // Set debate parameters from user preferences if available\r\n      if (userPrefs.technicalLevel || userPrefs.focusAreas) {\r\n        dispatch({\r\n          type: DEBATE_ACTIONS.UPDATE_DEBATE_PARAMETERS,\r\n          payload: {\r\n            technicalLevel: userPrefs.technicalLevel || state.debateParameters.technicalLevel,\r\n            emphasis: userPrefs.focusAreas || state.debateParameters.emphasis\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading user preferences for debate:', error);\r\n    }\r\n  }, []);\r\n  \r\n  // Load debate if debateId is in the URL\r\n  useEffect(() => {\r\n    if (params.debateId) {\r\n      loadDebate(params.debateId);\r\n    }\r\n  }, [params.debateId]);\r\n  \r\n  // Load a debate by ID\r\n  const loadDebate = async (debateId) => {\r\n    if (!debateId) return;\r\n    \r\n    dispatch({ type: DEBATE_ACTIONS.START_LOADING });\r\n    \r\n    try {\r\n      const debate = await debateService.getDebateById(debateId);\r\n      \r\n      dispatch({\r\n        type: DEBATE_ACTIONS.LOAD_DEBATE_SUCCESS,\r\n        payload: debate\r\n      });\r\n      \r\n      // Track debate view\r\n      analyticsService.trackDebateEvent(\r\n        analyticsService.ANALYTICS_EVENTS.DEBATE_STARTED,\r\n        debateId,\r\n        {\r\n          topic: debate.topic,\r\n          format: debate.format,\r\n          expertCount: debate.experts?.length || 0\r\n        }\r\n      );\r\n      \r\n      // Load experts if needed\r\n      if (debate.experts && debate.experts.length > 0) {\r\n        dispatch({\r\n          type: DEBATE_ACTIONS.SET_EXPERTS,\r\n          payload: debate.experts\r\n        });\r\n      }\r\n      \r\n      return debate;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: DEBATE_ACTIONS.LOAD_DEBATE_ERROR,\r\n        payload: error.message\r\n      });\r\n      \r\n      console.error('Error loading debate:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Start a new debate\r\n  const startNewDebate = async (topic, selectedExperts, format = state.debateFormat) => {\r\n    dispatch({ type: DEBATE_ACTIONS.START_LOADING });\r\n    \r\n    try {\r\n      const newDebate = await debateService.createDebate({\r\n        topic,\r\n        experts: selectedExperts,\r\n        format,\r\n        parameters: state.debateParameters\r\n      });\r\n      \r\n      dispatch({\r\n        type: DEBATE_ACTIONS.LOAD_DEBATE_SUCCESS,\r\n        payload: newDebate\r\n      });\r\n      \r\n      // Track debate creation\r\n      analyticsService.trackDebateEvent(\r\n        analyticsService.ANALYTICS_EVENTS.DEBATE_STARTED,\r\n        newDebate.id,\r\n        {\r\n          topic: newDebate.topic,\r\n          format: newDebate.format,\r\n          expertCount: newDebate.experts?.length || 0,\r\n          isNew: true\r\n        }\r\n      );\r\n      \r\n      // Navigate to the new debate\r\n      navigate(`/debate/${newDebate.id}`);\r\n      \r\n      return newDebate;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: DEBATE_ACTIONS.LOAD_DEBATE_ERROR,\r\n        payload: error.message\r\n      });\r\n      \r\n      console.error('Error creating debate:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Select an argument\r\n  const selectArgument = (argument) => {\r\n    dispatch({\r\n      type: DEBATE_ACTIONS.SELECT_ARGUMENT,\r\n      payload: argument\r\n    });\r\n    \r\n    if (argument) {\r\n      analyticsService.trackContentEngagement('argument', argument.id, {\r\n        type: 'select',\r\n        expertId: argument.expertId\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Toggle evidence panel\r\n  const toggleEvidencePanel = (isOpen) => {\r\n    dispatch({\r\n      type: DEBATE_ACTIONS.TOGGLE_EVIDENCE_PANEL,\r\n      payload: isOpen\r\n    });\r\n    \r\n    if (isOpen && state.selectedArgument) {\r\n      analyticsService.trackContentEngagement('evidence_panel', state.selectedArgument.id, {\r\n        type: 'open',\r\n        argumentId: state.selectedArgument.id\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Select evidence to view\r\n  const selectEvidence = (evidence) => {\r\n    dispatch({\r\n      type: DEBATE_ACTIONS.SELECT_EVIDENCE,\r\n      payload: evidence\r\n    });\r\n    \r\n    if (evidence) {\r\n      analyticsService.trackContentEngagement('evidence', evidence.id, {\r\n        type: 'view',\r\n        argumentId: state.selectedArgument?.id\r\n      });\r\n    }\r\n  };\r\n  \r\n  // Update debate parameters\r\n  const updateDebateParameters = (parameters) => {\r\n    dispatch({\r\n      type: DEBATE_ACTIONS.UPDATE_DEBATE_PARAMETERS,\r\n      payload: parameters\r\n    });\r\n    \r\n    // If we have an active debate, update it\r\n    if (state.currentDebate?.id) {\r\n      debateService.updateDebateParameters(state.currentDebate.id, {\r\n        ...state.debateParameters,\r\n        ...parameters\r\n      });\r\n      \r\n      analyticsService.trackEvent(\r\n        analyticsService.ANALYTICS_EVENTS.SETTINGS_CHANGED,\r\n        { parameters }\r\n      );\r\n    }\r\n  };\r\n  \r\n  // Ask a follow-up question\r\n  const askFollowupQuestion = async (question, targetExpertId = null) => {\r\n    if (!state.currentDebate?.id) return null;\r\n    \r\n    try {\r\n      const response = await debateService.askFollowupQuestion(\r\n        state.currentDebate.id,\r\n        question,\r\n        targetExpertId\r\n      );\r\n      \r\n      // Add new arguments to the state\r\n      if (response.arguments && response.arguments.length > 0) {\r\n        response.arguments.forEach(argument => {\r\n          dispatch({\r\n            type: DEBATE_ACTIONS.ADD_ARGUMENT,\r\n            payload: argument\r\n          });\r\n        });\r\n      }\r\n      \r\n      analyticsService.trackEvent(\r\n        analyticsService.ANALYTICS_EVENTS.QUESTION_ASKED,\r\n        {\r\n          debateId: state.currentDebate.id,\r\n          question,\r\n          targetExpertId\r\n        }\r\n      );\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error asking follow-up question:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Update debate format\r\n  const updateDebateFormat = (format) => {\r\n    dispatch({\r\n      type: DEBATE_ACTIONS.UPDATE_DEBATE_FORMAT,\r\n      payload: format\r\n    });\r\n    \r\n    // If we have an active debate, update it\r\n    if (state.currentDebate?.id) {\r\n      debateService.updateDebateFormat(state.currentDebate.id, format);\r\n    }\r\n  };\r\n  \r\n  // Generate takeaways from the debate\r\n  const generateTakeaways = async () => {\r\n    if (!state.currentDebate?.id) return null;\r\n    \r\n    dispatch({ type: DEBATE_ACTIONS.GENERATE_TAKEAWAYS });\r\n    \r\n    try {\r\n      const takeaways = await debateService.generateTakeaways(state.currentDebate.id);\r\n      \r\n      dispatch({\r\n        type: DEBATE_ACTIONS.SET_TAKEAWAYS,\r\n        payload: takeaways\r\n      });\r\n      \r\n      analyticsService.trackEvent(\r\n        analyticsService.ANALYTICS_EVENTS.TAKEAWAY_GENERATED,\r\n        {\r\n          debateId: state.currentDebate.id,\r\n          takeawayCount: Object.keys(takeaways).reduce(\r\n            (count, key) => count + takeaways[key].length,\r\n            0\r\n          )\r\n        }\r\n      );\r\n      \r\n      return takeaways;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: DEBATE_ACTIONS.LOAD_DEBATE_ERROR,\r\n        payload: error.message\r\n      });\r\n      console.error('Error generating takeaways:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Reset the state\r\n  const resetState = () => {\r\n    dispatch({ type: DEBATE_ACTIONS.RESET_STATE });\r\n  };\r\n  \r\n  // Value to be provided by the context\r\n  const contextValue = {\r\n    ...state,\r\n    loadDebate,\r\n    startNewDebate,\r\n    selectArgument,\r\n    toggleEvidencePanel,\r\n    selectEvidence,\r\n    updateDebateParameters,\r\n    askFollowupQuestion,\r\n    updateDebateFormat,\r\n    generateTakeaways,\r\n    resetState\r\n  };\r\n  \r\n  return (\r\n    <DebateContext.Provider value={contextValue}>\r\n      {children}\r\n    </DebateContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using the debate context\r\nexport const useDebateContext = () => {\r\n  const context = useContext(DebateContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useDebateContext must be used within a DebateContextProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default { DebateContextProvider, useDebateContext };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}